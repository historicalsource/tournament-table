	.TITLE PADDLE
	.ASECT
	.RADIX 16
;TIA REGISTER ADDRESSES
VSYNC	=00			;SYNC CONTROL BITS
VBLANK	=01
WSYNC	=02
RSYNC	=03
NUSIZ0	=04			;OBJECT AND MISSILE
NUSIZ1	=05			;HORIZONTAL DECODE CONTROL
COLUP0	=06			;COLOR AND LUMINANCE
COLUP1	=07			;PLAYERS 0 AND 1,
COLUPF	=08			;PLAYFIELD
COLUBK	=09			;AND BACKGROUND
CTRLPF	=0A			;PLAYFIELD CONTROL
REFP0	=0B			;PLAYER REFLECT BITS
REFP1	=0C
PF0	=0D			;PLAYFIELD GRAPHICS
PF1	=0E
PF2	=0F
RESP0	=10			;OBJECT HORIZONTAL
RESP1	=11			;RESET STROBES
RESM0	=12
RESM1	=13
RESBL	=14
AUDC0	=15			;AUDIO NOISE CONTROL
AUDC1	=16
AUDF0	=17			;AUDIO FREQUENCY
AUDF1	=18			;32.4KHZ-981HZ
AUDV0	=19			;AUDIO VOLUME
AUDV1	=1A
GRP0	=1B			;8 BIT OBJECT GRAPHICS
GRP1	=1C
ENAM0	=1D			;1 BIT OBJECT GRAPHICS
ENAM1	=1E
ENABL	=1F
HMP0	=20			;HORIZONTAL MOTION
HMP1	=21			;VECTORS -8<HM<+7
HMM0	=22
HMM1	=23
HMBL	=24
VDELP0	=25			;1 LINE VERTICAL
VDELP1	=26			;DELAY BIT
VDELBL	=27
RESMP0	=28			;RESET MISSILE TO
RESMP1	=29			;PLAYER
HMOVE	=2A			;USE HM VECTORS STROBE
HMCLR	=2B			;CLEAR HM VECTORS STROBE
CXCLR	=2C			;CLEAR COLLISION LATCHES
;READ ADDRESSES: BIT 7 AND 6
;COLLISION LATCHES (15)
CXM0P	=30			;M0-P1,M0-P0
CXM1P	=31			;M1-P0,M1-P1
CXP0FB	=32			;P0-PF,P0-BL
CXP1FB	=33			;P1-PF,P1-BL
CXM0FB	=34			;M0-PF,M0-BL
CXM1FB	=35			;M1-PF,M1-BL
CXBLPF	=36			;BL-PF,(BITS6=0)
CXPPMM	=37			;P0-P1,M0-M1
;INPUTS PORTS (ALL BIT 7)
INPT0	=38			;POT PORTS
INPT1	=39
INPT2	=3A
INPT3	=3B
INPT4	=3C			;TRIGGER INPUTS
INPT5	=3D
;PIA AND TIMER (6532) LOCATIONS
PORTA	=280
COIN1	=282
PORTB	=282
CTLSWA	=281
CTLSWB	=283
TIMER	=284			;READ TIMER
TFLG1	=285
TIM8T	=295			;DIVIDE BY 8 CLOCKS
TIM64T	=296			;DIVIDE BY 64
;PIA #2 & WATCHDOG TIMER
COIN0	=500
SWA	=500			;OPERATOR,TEST,&COIN SWITCHES
TESTSW	=500		;TEST SWITCH INPUT D6
CSWA	=501			;DATA DIR REG A
GSLED	=502			;D7 OUTPUT GAMES SELECT LED
STWRD	=502
CSWB	=503			;DATA DIR REG B
ITFLG	=505			;BIT 7 = 1 WHEN TIMER COUNT REACHED 0
T64	=516			;/ 64 I.T.

;RAM PAGE ZERO DEFINITIONS
	.=80			;START RAM AT 80
;RAM SCRATCH PAD REGISTERS
T0:	.BLKB 1
T1:	.BLKB 1
T2:	.BLKB 1
T3:	.BLKB 1
T4:	.BLKB 1
T5:	.BLKB 1
T6:	.BLKB 1
T7:	.BLKB 1
;TIMING VARIABLES
FRAMES:	.BLKB 1			;FRAME COUNTER
;GAME STATE VARIABLES
LSTPRT:	.BLKB 1
HITS:	.BLKB 1			;BALL/PADDLE HITS
ACTIVE:	.BLKB 1			;WHO'S IT
ACTIV2:	.BLKB 1			;"IT'S" TEAMMATE
CATCHF:	.BLKB 1			;CATCH FLAG
LSTPOS:	.BLKB 1			;LAST POSITION
GAMNUM:	.BLKB 1			;GAME NUMBER
GMCOD1:	.BLKB 1			;GAME CODES
GMCOD2:	.BLKB 1
PCOD1:	.BLKB 1			;PADDLES SPEC CODES
PCOD2:	.BLKB 1
PF0P:	.BLKB 2			;PLAYFIELD
PF1P:	.BLKB 2			;POINTERS
PF2P:	.BLKB 2
SCOREV:	.BLKB 2			;SCORE DETECT VECTOR
BOUNCV:	.BLKB 2			;WALL BOUNCE VECTOR
X4SEC:	.BLKB 1			;4 SECOND COUNTER
SCORET:	.BLKB 1			;SCORE TIMER
AUDIOT:	.BLKB 1			;AUDIO TIMER
SCRP0M:	.BLKB 1			;UPPER 2 SCORE DIGITS P0; BREAKOUT ONLY
SCRP1M:	.BLKB 1			;UPPER 2 SCORE DIGITS P1; BREAKOUT ONLY
;OBJECT POSITION/VELOCITY VALUES
VMSK0:	.BLKB 1			;VERTICAL SIZE
VMSK1:	.BLKB 1			;MASKS
VMSK2:	.BLKB 1
VMSK3:	.BLKB 1
HVP0:	.BLKB 1			;HORIZONTAL/VERTICAL
HVP1:	.BLKB 1			;ORIENTATION FLAGS
HVP2:	.BLKB 1
HVP3:	.BLKB 1
HPOS0:	.BLKB 1			;HORIZONTAL POSITIONS
HPOS1:	.BLKB 1			;0<HPOS<160
HPOS2:	.BLKB 1
HPOS3:	.BLKB 1
HPOSBL:	.BLKB 1
VPOS0:	.BLKB 1			;VERTICAL
VPOS1:	.BLKB 1			;POSITIONS
VPOS2:	.BLKB 1			;16<VPOS<256
VPOS3:	.BLKB 1
VPOSBL:	.BLKB 1
VPOSB2:	.BLKB 1			;2ND VPOS BYTE
VMVBL:	.BLKB 1			;BALL VERTICAL AND
VMVBL2:	.BLKB 1			;2ND VERT MV BYTE
HMVBL:	.BLKB 1			;HORIZONTAL MOTION
;POTENTIOMETER VALUES
PAD0:	.BLKB 1
PAD1:	.BLKB 1
PAD2:	.BLKB 1
PAD3:	.BLKB 1
;PLAYER BUTTON FLAGS
BUT0:	.BLKB 1			;BUTTONS, SPREAD
BUT1:	.BLKB 1			;OUT IN AN INDEXABLE
BUT2:	.BLKB 1			;ARRAY
BUT3:	.BLKB 1
ACTBUT:	.BLKB 1			;ACTIVE PLAYER BUTTON
ACTBT2:	.BLKB 1			;  "    OF TEAMMATE
;PLAYFIELD DISPLAY VARIABLES
SCP0:  .BLKB 1			;LOWER DIGITS P0, BREAKOUT ONLY
SCP1:	.BLKB 1			;LOWER DIGITS P1, BREAKOUT ONLY
SCRD0:	.BLKB 2			;SCORE DIGITS (BCD);LOWER
SCRD1:	.BLKB 2
SCUD0H: .BLKB 2
ATFLG:	.BLKB 1			;D7=1 FOR ATTRACT MODE ON  ;D6=1 FOR BREAKOUT  ;D5=1 FOR TEAM
INITF:	.BLKB 1
QPONGF:	.BLKB 1
BRIKF:	.BLKB 1			;TIMER FOR TEAM BREAKOUT
BWLFG:	.BLKB 1
BREAKF:	.BLKB 1
TWO:	.BLKB 1			;D7=1 FOR LEFT PLAYER PLAY  =0 FOR RIGHT PLAYER
RBCNT:  .BLKB 1
LBCNT:	.BLKB 1
RBLCNT:	.BLKB 1
LBLCNT:	.BLKB 1
BKOVR:  .BLKB 1
SMALL:	.BLKB 1		;NEG WHEN SMALL PADDLE
ONE:	.BLKB 1		;NEG WHEN 1 PLAYER BREAKOUT
BALOUT:	.BLKB 1		;NEG WHEN BALL COUNT TO BE DISPLAYED
T8:	.BLKB 1
T9:	.BLKB 1
T10:	.BLKB 1
PFCOL:  .BLKB 1
P0COL:	.BLKB 1
P1COL:	.BLKB 1
AUDBK:  .BLKB 1
BPF0A:	.BLKB 1
BPF0B:	.BLKB 1
CRED:	.BLKB 1
SLMFLG:	.BLKB 1
SLAMTM:	.BLKB 1
CV1:	.BLKB 2
CV2:	.BLKB 2
CNT1:	.BLKB 2
CNT2:	.BLKB 2
GAMVAL:	.BLKB 1			;GAME GROUP #
CNNUM:	.BLKB 1
BONUS:	.BLKB 1
BONFLG:	.BLKB 1
BINDX:	.BLKB 1
BONC1:	.BLKB 1
BONV1:	.BLKB 1
SNFLG:	.BLKB 1
SVRAM:	.BLKB 1

STKST	=0FF

;EXTRA WORKING RAM FOR PLAYFIELD OUTPUT AND MANIPULATION

	.=400
NUMPL:	.BLKB 8.
LBRICK:	.BLKB 3
LBRK:	.BLKB 10.
RBRICK:	.BLKB 3
RBRK:	.BLKB 10.
MSD0:	.BLKB 5			;SPACE FOR SCORE GRAPHICS, BREAKOUT ONLY
MSD1:	.BLKB 5
LSD0:	.BLKB 5
LSD1:	.BLKB 5
BAL0:	.BLKB 5
BAL1:	.BLKB 5
MSG1:	.BLKB 11.
MSG2:	.BLKB 11.
CVA:	.BLKB 2
PIPE0:	.BLKB 2
PIPE1:	.BLKB 2
NUMBER: .BLKB 1
STARTF:	.BLKB 1
STWMSK:	.BLKB 1
STFLG:	.BLKB 1
BONVAL:	.BLKB 1
FCNCTR:	.BLKB 2
RCNCTR:	.BLKB 2
FIRST:	.BLKB 1
SRVTM:	.BLKB 1
STUCK:	.BLKB 2
CNSTK:	.BLKB 2

;WAKEUP INITIALIZATION
	.=800
	.BYTE 0B			;CHECKSUM CODE FOR 1ST ROM
;FRAME MAIN EXECUTIVE
VBLKST:	BIT A,TESTSW		;CHECK TEST SWITCH ON
	BVC 3$
	JMP TEST
3$:	LDY I,18.		;60 HZ.
	LDA I,10
	BIT A,PORTB		;TEST 50/60 HZ.
	BEQ 2$
	LDY I,49.		;50 HZ VBSTART
2$:	LDX I,82
	STA WSYNC		;AND DUMP CAPACITORS
	STX VBLANK		;START VBLANK
	STY A,TIM64T		;SET TIMER(20 LINES)
	LDA I,0			;RESET WATCH DOG
	STA A,PORTB
	LDA I,1
	STA A,PORTB
	JSR CN2			;CHECK FOR COIN PRESENT
;SOUND SUBROUTINE
AUDIO:  LDA AUDBK
	BEQ 3$
	LDA I,3F
	BIT AUDIOT
	BNE AUDIO1
	LDA I,01
	BIT FRAMES
	BNE AUDIO6
	DEC AUDBK
	LDA I,42
	STA AUDIOT
	LDY I,0
	BEQ AUDIO6
3$:	LDA I,3F
	LDY I,0
	BIT AUDIOT		;TEST AUDIO STATUS
	BEQ AUDIO6		;BRANCH IF OFF
	BMI AUDIO2		;BRANCH IF HIT
AUDIO1:	TAX			;AND SAVE
	BPL AUDIO4		;GET CONTROL WORD
AUDIO2:	LDA SNFLG
	BMI AUDIO3
	LDA HMVBL		;IF HIT, TAKE
	BMI AUDIO3		;-/BALL H VELOCITY/
	JSR NEGATE		;NEG ABS VALUE HMVBL
AUDIO3:	ASL			;MULTIPLY BY 4
	ASL
	ADC I,24.		;OFFSET TO BASE FREQ
	TAX			;AND SAVE
AUDIO4:	BIT AUDIOT		;TEST BIT 6
	LDA I,4			;CODE FOR 15.7KHZ OR
	BVS AUDIO5		;5.2KHZ FUNDAMENTAL
	LDA I,12.
AUDIO5:	DEC AUDIOT		;COUNT TIME
	LDY I,8		;FIX AT HALF VOLUME
AUDIO6:	STY AUDV0		;OUTPUT VOLUME
	STX AUDF0		;OUTPUT FREQUENCY
	STA AUDC0		;OUTPUT CONTROL CODE
	LDA BONV1		;BONUS SOUND FOR BREAKOUT
	BNE 1$
	STA BONC1
	STA BINDX
	STA AUDV1
	STA AUDF1
	STA AUDC1
	BEQ PFGO
1$:	LDA FRAMES
	AND I,3
	BNE 3$
	LDA BONC1
	BEQ 2$
	DEC BONC1
	BNE 4$
2$:	LDA I,0
	STA AUDV1
	LDX BINDX
	LDA AX,BONSND
	STA AUDF1
	INX
	LDA I,04
	STA AUDC1
	LDA AX,BONSND
	INX
	STX BINDX
	TAX
	AND I,0F
	STA BONC1
	TXA
	LSR
	LSR
	LSR
	LSR
	STA BONV1
	BCC PFGO
3$:	LDX BONC1
	BEQ PFGO
4$:	LDA BONV1
	STA AUDV1
PFGO:	BIT ATFLG
	BPL PFI
	LDA A,STWRD
	EOR I,0F
	AND A,STWMSK
	BEQ PFI
	LDY GAMNUM
	STY A,NUMBER
	LSR
	LSR
	BCS STRT4
	LSR
	BCS STRT2
STRT1:	DEC CRED
	JMP STGM
STRT2:	DEC CRED
	DEC CRED
	BIT A,STFLG
	BPL STGM
	BVC STGM
	INC GAMNUM
	BNE STGM
STRT4:	SEC
	LDA CRED
	SBC I,4
	STA CRED
	BIT A,STFLG
	BVS STGM
	INC GAMNUM
STGM:	LDA I,0
	STA INITF
	LDA I,80
	STA A,STARTF
PFI:	JSR PFINIT		;SET UP PLAYFIELD
;VERTICAL SYNC PROCESSING
VSYNST:	LDA SLMFLG		;SLAM FLAG & TIMER PROCESS
	BNE 1$
	LDA I,80
	STA A,STUCK
	STA A,STUCK+1
	STA CV1
	STA CV1+1
	LDA I,15
	STA SLMFLG
	STA SLAMTM		;START SLAM TIMEOUT
1$:	LDA SLAMTM
	BEQ 2$
	DEC SLAMTM
	LDA I,0
	LDY I,5
3$:	STA AY,CVA
	DEY
	BPL 3$
	STA CV2
	STA CV2+1
	LDA I,7
	LDX I,3
4$:	STA ZX,CNT1
	DEX
	BPL 4$
2$:	INC FRAMES		;COUNT FRAMES
	BNE VSYN1		;DECODE FIRST/256
	INC X4SEC		;TIMEOUT GAME
	LDX SCORET
	BEQ VSYN1
	BIT BREAKF
	BPL VSYN1
	CPX I,1
	BEQ VSYN1
	DEC SCORET
VSYN1:	LDA I,32.		;TEST BIT 5 FOR GRAVITY
	BIT GMCOD1		;TEST IF GRAVITY
	BEQ VSYN2		;BRANCH IF NOT GRAVITY
	BIT CATCHF		;TEST IF CAUGHT
	BVS VSYN2		;BRANCH IF CAUGHT
	ADC VMVBL2		;BUMP VMV BY 33/256
	STA VMVBL2		;OF A LINE/FRAME(C=1)
	BCC VSYN2		;PROPAGATE CARRY
	INC VMVBL		;INTO MSB
VSYN2:	JSR COININ		;CHECK FOR COINS
	LDA A,TFLG1		;WAIT OUT 1ST
	BPL VSYN2		;VBLANK INTERVAL
	LDX I,3			;(PRESETUP LOOP COUNT)
	STX WSYNC		;WAIT FOR SYNC
	STX VSYNC		;TURN ON VSYNC
	STA HMCLR		;CLEAR HM VECTORS,
	STX A,TIM64T
VSYN4:	LDA A,PORTA		;TEST BUTTONS
	AND AX,BUTMSK		;AND SPREAD THEM
	BEQ VSYN5		;OUT IN AN ARRAY
	LDA I,0C0		;IF OFF, SET TOP BITS
VSYN5:	STA ZX,BUT0
	CPX ACTIVE		;TEST IF ACTIVE
	BNE VSYN6		;BRANCH NOT ACTIVE
	STA ACTBUT		;"ACTIVE" BUTTON
VSYN6:	CPX ACTIV2		;TEST FOR
	BNE VSYN7		;"ACTIVE"'S TEAMMATE
	STA ACTBT2
VSYN7:	TAY			;TEST FOR ZERO
	BNE VSYN8		;BRANCH IF INACTIVE
	BIT GMCOD2		;TEST JUMP BUTTON
	BVC VSYN8		;BRANCH IF NOT JUMP
	LDA ZX,VPOS0		;JUMP THE PLAYER
	SBC I,50.		;50 LINES UP
	STA ZX,VPOS0
VSYN8:	DEX
	BPL VSYN4
	INX			;CLEAR VSYNC
1$:	LDA A,TFLG1
	BPL 1$
	STX WSYNC		;START LINE
	STX VSYNC		;CLEAR VSYNC
	LDY I,50.		;60 HZ.
	LDA I,10
	BIT A,PORTB		;TEST 50/60 HZ.
	BEQ 3$
	LDY I,81.		;50 HZ REST OF NB
3$:	STY A,TIM64T		;SET TIMER
	JSR BKSSET		;UP-DATE SCORE OUTPUT INFO
	LDX I,0
;END VSYNC, SAMPLE BUTTONS
FRAME:	BIT ATFLG		;TEST BIT 7 OF STATUS
	BMI 1$		;BRANCH IF PLAY
	JMP PLAY
1$:	LDA A,PORTB
	TAY
	EOR LSTPRT
	STY LSTPRT
	AND I,2
	BEQ FRM0
	LDA I,0
	BEQ FRM1
FRM0:	LDA I,2
FRM1:	BIT A,STARTF
	BPL 1$
	JMP RESTRT
1$:	ORA A,PORTB
	EOR I,3
	AND I,3
	LSR
	LSR
;ATTRACT MODE STATUS ARBITRATIONER
ATRACT:	STA AUDIOT		;TURN SOUND OFF
	STA VPOSBL		;HOLD BALL OFF SCREEN
	LDA I,4
	BIT A,PORTB	;TEST FOR P/O
	BEQ AT2		;0-SELECT
2$:	LDA A,PORTA	;0-SWITCHES
	AND I,0F
	CMP I,11.
	BCC 3$
	LDA I,11.
3$:	CMP GAMVAL
	BEQ AT0
	STX INITF
	BNE AT0
AT2:	BCS 1$
	LDA GAMVAL
	JMP AT0
1$:	TXA
	STA INITF		;CLEAR INITIALIZATION FLAG FOR NEXT PF
	ADC GAMVAL		;IF ON, BUMP GAME BY 1,
	CMP I,12.		;CHECK FOR OVERFLOW;CHANGE FOR # OF GAMES N GROUP (50 TO 21)
	BMI AT0		;BRANCH IF OK
	TXA			;CLEAR IF OVERFLOW (X=0)
AT0:	STA GAMVAL		;SAVE GAME #,
	ASL
	TAY
	LDA AY,GAMCON		;GET GAME GROUP BASE #
	STA GAMNUM
	LDA AY,GAMCON+1
	STA A,STFLG
AT1:	JSR CVALID		;COIN/CREDIT VALIDATION-CONVERSION
	LDY CRED
	BNE STLMP1
STLMP:	LDA I,80
	STA A,STWRD		;START LAMPS OFF & GAME SELECT ON
	LDA I,0
	STA A,STWMSK
	JMP FRAME1
STLMP1: LDA A,STWRD
	AND I,0F0
	ORA A,STWMSK
	TAX
	BIT A,STFLG
	BMI 2$
	BVS 3$
	CPY I,2
	BCC STLMP
	TXA
	ORA I,0A4
	TAX
7$:	CPY I,4
	BCS 5$
9$:	TXA
	AND I,0A4
	TAX
	JMP 11$
5$:	TXA
	AND I,0B6
	ORA I,12
	TAX
	BNE 11$
3$:	TXA			;START 2 OFF
	AND I,0DA
	TAX
	JMP 7$
2$:	BVS 8$			;BREAKOUT, YES
	CPY I,2
	BCC STLMP
	LDX I,0A4		;START 2 ON AND 4 & 1 OFF
	BNE 11$
8$:	CPY I,2
	BCS 10$
	LDX I,0C8
	BNE 11$
10$:	LDX I,0EC
11$:	TXA
	STA A,STWRD
	AND I,0F
	STA A,STWMSK
	JMP FRAME1		;CONVERGE W/PLAY
;RESTART THE CURRENT GAME
RESTRT:	STX AUDIOT		;SOUND OFF
	LDA I,0
	STA REFP0
	STA REFP1
	STA SNFLG
	STA SCRP0M
	STA SCRP1M
	STA SCP0
	STA SCP1
	STA ATFLG
	STA A,STARTF		;CLEAR START FLAG
	STA A,STWMSK
	STA A,GSLED
	STA RBLCNT		;CLEAR BALL NUMBERS
	STA LBLCNT
	INX			;CLEAR GAME TIMEOUT (X=1)
	STX X4SEC		;SET NON ZERO
	STX ACTBUT		;FIRST SERVE AUTOMATIC
	STA BKOVR
	LDY I,25.		;SET BRICKS
	LDA I,3F
1$:	STA AY,LBRICK
	DEY
	BNE 1$
	LDA I,0C4		;-60. BRICK COUNT
	STA RBCNT
	STA LBCNT
	LDA I,0FF		;ASSERT PLAY STATUS
	STA ACTIVE		;CLEAR ACTIVE FLAG
	LDA I,5
	BIT BREAKF
	BMI 4$
	LDA I,7E		;DISPLAY 0-0 SCORES
4$:	STA SCORET		;FOR 1 SECOND
;PLAY MODE STATUS DECISIONS
PLAY:	BIT BREAKF
	BMI PLY0
	BIT A,INPT5		;GAME TIME SETTING
	BPL 8$			;SHORT
	LDY I,14
	INX
	INX
	BNE 1$
8$:	LDY I,10
1$:	LDA I,10
	BIT A,PORTB		;50/60 HZ CHECK
	BEQ 5$			;60 HZ.
	INX
5$:	LDA AX,GT
	STA T1
	LDX X4SEC
	CPX T1
	BNE PLY2
PLY1:	JMP GMOVR
PLY0:	LDA A,SRVTM
	BEQ PLY3
	DEC A,SRVTM
	BNE PLY3
	LDA I,0
	BIT ONE
	BMI PLY3
	STA BALOUT
PLY3:	BIT BONFLG
	BMI 1$
	LDX I,1
	BIT BONUS
	BVC 2$
3$:	DEX
	BMI 1$
	BIT BONUS
	BMI 1$
2$:	LDA A,BONVAL
	TAY
	AND I,0F
	STA T1
	LDA ZX,SCRP0M
	CMP T1
	BCC 3$
	TYA
	AND I,0F0
	STA T1
	LDA ZX,SCP0
	CMP T1
	BCC 3$
	INC CRED
	LDA BONUS
	ORA AX,BONT
	STA BONUS
	STA BONV1
	BNE 3$
1$:	BIT BKOVR
	BPL PLY4
	LDX I,0
	BEQ PLY1
PLY2:	CPY SCP0		;TEST FOR END SCORE
	BMI PLY1		;DONE, BYPASS ACTION
	CPY SCP1		;CHECK OTHER PLAYER
	BMI PLY1		;DONE, BYPASS ACTION
PLY4:	LDX SCORET		;TEST FOR SCORE
	BNE 1$
	JMP ACTION		;TIME,BRANCH IF NOT
1$:	LDA I,0
	STA VPOSBL
	BIT BREAKF
	BMI 7$
	DEC SCORET		;COUNT DOWN SCORE TIME
	BEQ SRVBAL
	BNE PLY
7$:	CPX I,1
	BEQ SRVBAL
	BIT TWO
	BMI 9$
	LDA I,10
	BIT A,PORTA
	BEQ SRVBAL		;SERVE BUTTON ACTIVE
	BNE 10$
9$:	LDA I,20
	BIT A,PORTA
	BEQ SRVBAL		;SERVE BUTTON ACTIVE
10$:	LDA I,40
	BIT TWO
	BMI PLY
	ASL
PLY:	STA BALOUT
	JMP FRAME1		;WAIT TIL TIMEOUT
;SERVE NEXT BALL
SRVBAL:	LDA I,0			;CLEAR SCORE TIME
	STA SCORET
	STA HITS		;CLEAR HITS
	STA T9			;CLEAR BALL SPEED FLAG BK.
	STA VMVBL2		;CLEAR LSB BALL VMV
	LDA I,48		;SET FOR SERVE
	STA AUDIOT		;SOUNDS
	LDA I,80		;SERVE BALL FROM CENTER
	STA HPOSBL		;OF SCREEN
	STA LSTPOS		;START LSTPOS AT BALL
	BIT BREAKF
	BPL 2$
	LDA I,40
	STA A,SRVTM
	LDA FRAMES
	AND I,0F0
	CMP I,52.
	BCS 3$
	LDA I,52.
	BNE 2$
3$:	CMP I,204.
	BCC 2$
	LDA I,204.
2$:	STA VPOSBL
	LDA I,1			;REVERSE DIRECTION
	BIT VMVBL		;WITH MINIMUM VELOCITY
	BPL SRVB1		;BR IF IT WAS-
	LDA I,0FF		;IF IT WAS +, REVERSE
SRVB1:	STA VMVBL		;OUTPUT NEW VMVBL
	LDA I,1			;DO THE SAME FOR HORIZONTAL
	BIT BREAKF
	BPL 2$
	BIT TWO
	BMI SRVB3
	INC LBLCNT
	BPL 1$
2$:	BIT PCOD2		;TEST FOR HANDBALL
	BMI SRVB2		;SERVE TO LEFT IF HB
	AND ACTIVE		;MOTION
	BNE SRVB2
1$:	LDA I,0FF
SRVB2:	STA HMVBL
	BNE ACT4		;CONVERGE
SRVB3:	INC RBLCNT
	BNE SRVB2
;BALL IN FLIGHT PROCESSING
;SCORING, BALL/WALL BOUNCING
ACTION:	LDA HPOSBL		;COMPUTE BALL
	SEC
	BIT BREAKF
	BMI ACTB
	SBC I,1			;OFFSET TO CENTER, C=1
	BPL 2$		;NEGATE IF ON RIGHT SIDE
	EOR I,0FF
2$:	LSR			;IN THE SCORING AND BALL
	LSR			;VS WALL BOUNCING ROUTINES
ACTB:	TAX			;SAVE HORIZ COORDINATE IN X
	STA T0			;AND IN T0
	LDA VPOSBL		;COMPUTE THE VERTICAL
	BIT BREAKF
	BPL 1$
	CMP I,0CC
	BCS 2$
	CLC
	ADC I,4
2$:	LSR
	BNE ACT1
1$:	CLC			;COORDINATE
	ADC I,2			;OFFSET TO CENTER OF BALL
	BPL ACT1		;COMPLEMENT IF-
	EOR I,0FF
ACT1:	LSR			;DIVIDE BY 8
	LSR			;(Y INDEX IS IDENTICAL TO
	LSR			;THE KERNAL PF INDEX
	TAY			;SAVE VERT INDEX IN Y
	JMP N,SCOREV		;GO DO SCORING
ACT2:	BIT BREAKF
	BPL 1$
	JMP N,BOUNCV
1$:	BIT CXBLPF		;TEST FOR WALL HIT
	BPL ACT3		;BRANCH IF NOT WALL HIT
	LDA I,0			;CLEAR BOUNCE FLAGS
	JMP N,BOUNCV		;BOUNCE OFF WALL
ACT3:	JSR BALPDL		;BOUNCE OFF PADDLES
ACT4:	JSR STPBAL		;MOVE BALL
;PADDLE MOTION
FRAME1:	JSR COININ		;CHECK FOR COINS
	BIT ATFLG
	BPL 1$
	LDX I,1
2$:	LDA ZX,HPOS0
	JSR CHRST
	DEX
	BPL 2$
	BMI VBLKND
1$:	LDA GMCOD2		;GET RANGE
	ASL			;RESTRICTION BIT, AND SAVE
	STA T4			;IN BIT 6 OF T4
	LDX I,3			;DO A BIG LOOP 4 TIMES
PDL1:	LDA ZX,PAD0		;GET POT VALUE
	LDY ZX,HVP0		;TEST V/H BIT
	BMI PDL3		;BRANCH IF HORIZONTAL
	BIT PCOD2		;TEST MULT VERT BIT
	BVC PDL2		;BRANCH IF SINGLE VERT
	LSR			;IF MULTI, /2 AND OFFSET
PDL2:	STA ZX,VPOS0		;STORE VPOS
	LDA ZX,HPOS0		;GET HORIZONTAL POS
	BNE PDL7		;CONVERGE
PDL3:	EOR I,0FF		;REVERSE DIRECTION
	CMP I,56.		;LIMIT TO 42<AC<186
	BCS PDL4		;BRANCH >42
	LDA I,56.		;LOWER LIMIT OF 42
PDL4:	CMP I,182.		;CHECK FOR UPPER
	BCC PDL5		;BOUND, BR IF <186
	LDA I,182.		;LOAD UPPER BOUND
PDL5:	BIT T4			;TEST FOR RESTRICTED RANGE
	BVC PDL6		;BRANCH NOT RESTRICTED
	LSR			;IF RESTRICTED, /2 AND
	ADC AX,POFTBL		;AND ADD AN OFFSET
PDL6:	STA ZX,HPOS0		;SAVE NEW HPOS
PDL7:	JSR CHRST		;OUTPUT HPOS TO TIA
	DEX			;COUNT DOWN, AND DO NEXT ONE
	BPL PDL1
	BIT BREAKF
	BPL 2$
	LDA I,0
	BIT TWO
	BPL 1$
	STA VPOS3
	BMI 2$
1$:	STA VPOS2
2$:	LDA FRAMES		;SET UP INDEX TO POTS
	AND I,7			;POLLING IN KERNAL, AND
	TAY			;SET ASIDE ROBOT DUTY CYCLE
	AND I,1			;MASK (8TH FRAME)
	STA T0			;SAVE POT INDEX
PDL10:	LDA ACTIVE		;DEFINE ACTIVES
	TAX			;TEAMMATE POINTER
	EOR I,2
	STA ACTIV2
	BMI VBLKND		;BRANCH IF NONE ACTIVE
	BIT PCOD2		;TEST FOR HANDBALL
	BPL VBLKND		;BRANCH NOT HANDBALL
	LDA I,1C		;AT A 32 FRAME RATE
	AND FRAMES
	BNE VBLKND
	STA ZX,VPOS0		;BLANK=OFFSCREEN
	LDX ACTIV2		;AND HIS/HER
	STA ZX,VPOS0		;TEAMMATE
;END OF VBLANK
VBLKND:	JSR COININ		;CHECK FOR COINS
	LDA A,TFLG1		;WAIT FOR END
	BPL VBLKND		;OF VBLANK
	LDA I,0
	STA CXCLR		;CLEAR COLLISIONS
	STA WSYNC		;BEGIN 1ST LINE
	STA HMOVE		;MOVE OBJECTS
	STA VBLANK		;CLEAR VBLANK
;DISPLAY SCORES, AND PLAY ACTION
	JSR BKSOUT
	BIT ATFLG
	BPL 2$
	JSR APVOUT
	JMP VBLKST
2$:	BIT BREAKF
	BMI 3$
	JSR PVOUT
	JMP VBLKST
3$:	JSR BVOUT
	JMP VBLKST

;PLAYFIELD INITIALIZATION
PFINIT:	BIT INITF		;TEST INIT FLAG
	BMI PFIN2		;NOT CLEAR, PF ALREADY INITIALIZED
	LDA GAMNUM		;FETCH GAME
	AND I,1F		;CODE PAIR FROM GAME I,
	ASL
	TAX
	LDA AX,GAMTBL+1		;2ND BYTE
	STA GMCOD2
	LDA AX,GAMTBL		;1
	STA GMCOD1
	AND I,7			;EXTRACT PLAYFIELD SPEC
	STA T0			;POINTER, AND MULITPLY
	ASL			;BY 10, TO TRANSFER THE
	ASL			;3 PLAYFIELD POINTERS,
	ASL			;AND THE VECTORS TO THE
	ADC T0			;SCORING AND WALL BOUNCE
	ADC T0
	ADC I,9			;SUBROUTINES;OFFSET TO HEND OF PF BLOCK
	TAY
	LDX I,9			;MOVE 10 BYTES
PFIN1:	LDA AY,PFSTBL
	STA ZX,PF0P
	DEY
	DEX
	BPL PFIN1
GMNAME:	LDY GAMNUM
	LDX AY,GAMMSG
	LDY I,10.
1$:	LDA AX,GMES
	STA AY,MSG2		;GAME NAME
	DEX
	DEY
	BPL 1$
	LDA I,80
	STA INITF		;SET INIT FLAG, PF HAS BEEN INITIALIZED
PFIN2:	STX T1			;SAVE
;PADDLE INITIALIZATION
PDINIT:	BIT ATFLG
	BMI INATP
	LDA GMCOD2
	AND I,1F		;PADDLE SPECIFICATION
	ASL			;BITS, IN PCOD1 & PCOD2
	TAY
	LDA AY,PCDTBL+1		;GET PADDLE CODE
	STA PCOD2		;BITS FROM TABLE
	LDA AY,PCDTBL
	STA PCOD1		;GET CODE BITS
	AND I,0C0		;MASK OFF V/H BITS
	BRK			;SHIFT DOWN
	NOP
	LSR			;SHIFT TO BITS 2&1, AS
	TAX			;AN INDEX TO A SHORT TABLE
	TAY			;USED TO ADJUST PADDLE
	LDA I,0			;VERTICAL AND HORIZONTAL
	BIT PCOD2		;DIMENSIONS ACCORDING
	BVS PDIN1		;TO THE SETTINGS OF THE
	LDA I,0C0		;DIFFICULTY SWITCHES
PDIN1:	STA T0			;MASK FOR MULTIPLY
PDIN3:	STX T1			;SAVE THE P0/2 INDEX
	LDX I,1			;POINT TO P1/3
	JSR PDIN8		;GO TO VMSK'S & NUSIZ'S
	DEX			;POINT TO P0/2
	LDY T1			;RECOVER THEIR INDEX
	JSR PDIN8		;AND DO THE SAME
	LDA GMCOD1		;FETCH AND SHIFT P2/3
	LSR			;SHIFT INTO BIT 2
	LSR			;SHIFT INTO BIT 1
	STA RESMP0		;SET/CLEAR MISSLE 0
	STA RESMP1		;SET/CLEAR MISSLE 1
	LDA PCOD1		;CREATE H/V FLAG ARRAY
	STA HVP0		;FOR ALL 4 PLAYERS
	STA HVP1
	ASL			;BIT 6 - P2 AND P3
	STA HVP2
	STA HVP3
	LDA I,3			;FOR 4 PLAYERS
	TAX			;FETCH AND STORE THE FIXED
	ORA PCOD2		;COORDINATES, POINTED
	AND I,3F		;TO BY THE 2ND CODE BYTE
	TAY			;POINTER, AND INITIALIZE THE
PDIN4:	LDA ZX,HVP0		;TEST HV FLAG
	ASL			;SAVE IN CARRY
	LDA AY,POSTBL		;FETCH FIXED COORDINATE
	BCS PDIN5		;BRANCH IF HORIZ
	STA ZX,HPOS0		;FIX HORIZ OF VERT
	BCC PDIN6		;CONVERGE
PDIN5:	STA ZX,VPOS0		;FIX VERT
PDIN6:	DEY			;COUNT DOWN THRU TABLE
	DEX
	BPL PDIN4
	BIT BREAKF
	BPL VBST
	BIT TWO
	BPL 1$
	LDA I,96
	BNE 2$
1$:	LDA I,40
2$:	STA HPOS0
	STA HPOS1
VBST:	RTS
	
INATP:  BIT A,STARTF
	BPL INATP0
	LDA I,8
	BIT A,PORTB		;CHECK BW SWITCH
	BNE INATP0
	LDX I,3
1$:	LDA AX,LUMTBL
	STA ZX,COLUP0
	DEX
	BPL 1$
	BMI MESPOS
INATP0: LDA I,0
	STA COLUBK
	LDA FRAMES
	AND I,7F
	BNE MESPOS
	LDA PFCOL
	JSR AD2
	CMP I,4
	BCS 1$
	ADC I,6
1$:	STA PFCOL
	STA COLUPF
	LDA P0COL
6$:	JSR AD2
	CMP PFCOL
	BEQ 6$
	STA P0COL
	STA COLUP0
	LDA P1COL
7$:	JSR AD2
	CMP PFCOL
	BEQ 7$
	CMP P0COL
	BEQ 7$
	STA P1COL
	STA COLUP1
MESPOS:	LDA A,PORTA
	AND I,0F
	SEC
	SBC I,11.
	BPL 1$
	LDA I,0
1$:	BIT A,INPT4
	BMI 6$
	LDA I,5
6$:	TAY
	LDA AY,BONTBL
	STA A,BONVAL
	LDA I,60		;HPOS P0 FOR MESSAGE
	STA HPOS0
	LDA I,90		;HPOS P1 FOR MESSAGE
	STA HPOS0+1
	LDA GAMNUM
	LDY I,0
	CMP I,10.		;QPONG 2
	BNE 5$
	LDY I,80
5$:	STY QPONGF
	LDY I,80
	CMP I,20.
	BCC 2$
	STY BREAKF
	LSR
	BCS 3$
	STY ONE			;SET 1 PLAYER MODE; BREAKOUT 1
	LDA I,0
	STA TWO
	BEQ 4$
3$:	LDA I,0
	STA TWO
	BEQ 9$
2$:	LDA I,0
	STA BREAKF
	STA TWO
9$:	STA ONE
4$:	STA SMALL
	STA BALOUT
	LDA I,2
	STA RESMP0		;DISABLE MISSLES
	STA RESMP1
	LDA I,0
	STA NUSIZ0		;SET PLYR SIZE
	STA NUSIZ1
	STA REFP0
	STA REFP1
	STA VDELP0		;SET VERTICAL DELAY FOR P0 & P1 OFF
	STA VDELP1
MESSET:	LDA CRED
	BEQ GMV
	LDA A,SWA		;LANGUAGE;SET-UP X=CREDITS& PUSH START
	AND I,30
	LSR
	LSR
	LSR
	PHA
	ORA I,1
	TAY
	LDX AY,STATTB
	LDY I,10.
2$:	LDA AX,STATMS		;CREDITS
	STA AY,MSG1
	DEX
	DEY
	BPL 2$
	PLA
	TAY
	LDA CRED
	CMP I,2
	BCS 3$
	CPY I,6
	BNE 4$
	LDY I,0
	STY A,MSG1+10.
	BEQ 3$
4$:	LDY I,0
	STY A,MSG1+9.
3$:	CMP I,9.
	BCC 1$
	LDA I,9.
1$:	CLC
	ADC I,1A
	STA A,MSG1+1
	RTS
GMV:	LDA A,SWA		;LANGUAGE
	AND I,30
	LSR
	LSR
	LSR
	TAY
	LDX AY,STATTB
	LDY I,10.
2$:	LDA AX,STATMS		;GAME OVER
	STA AY,MSG1
	DEX
	DEY
	BPL 2$
	RTS
AD2:	CLC
	ADC I,2
	AND I,0E
	BEQ AD2
	RTS

PDIN8:	LDA AY,NSZTBL		;GET DIFF MASK
	ORA PCOD1		;MERG W/NUSIZ CODE
	STA ZX,NUSIZ0		;OUTPUT TO TIA
	LDA AY,MSKTBL		;GET P0/2 VERTICAL
	ORA T0			;DIFF MASK, AND MERGE
	STA ZX,VMSK0		;W/MULTIPLE VMSK
	LDA AY,MSKTBL+8		;DO THE SAME FOR
	ORA T0			;P2 AND P3
	STA ZX,VMSK2
	BIT BREAKF
	BPL 1$
	BIT SMALL
	BPL 2$
	LDA I,0F8		;YES, SMALL PADDLE SET
	STA ZX,VMSK0
	STA ZX,VMSK2
	BNE 1$
2$:	LDA I,0F0		;NOT SMALL PADDLE; SET LARGE
	STA ZX,VMSK0
	STA ZX,VMSK2
1$:	RTS

SCBK0:	LDX I,0
	BEQ SCBK2
SCBK1:	LDX I,1
SCBK2:	STX ACTIVE
	SED
	CLC
	ADC ZX,SCP0
	STA ZX,SCP0
	LDA ZX,SCRP0M
	ADC I,0
	STA ZX,SCRP0M
	CLD
	RTS


;GAME SCORE DETECTION SYSTEM
BKSCOR:	BIT BRIKF		;(X)=HORIZONTAL ADDRESS OF BALL;(Y)=VERTICAL(+ SOME OFFSET)
	BMI BKEX
	LDA A,CXP0FB
	ORA A,CXP1FB
	ASL
	BMI 1$
	JMP ACT2
1$:	TXA
	LDX I,5
	BIT TWO
	BPL LTCOL
RTCOL:	CMP AX,RTB
	BCS NEXT
	CMP AX,RTA
	BCC NEXT
	LDA AX,RPNTS			;GET POINTS FOR BRICK
	STA T6
	LDA AX,RTC			;GET DELETE MASK;VOLLEYBALL SCORING
	STA T7
	EOR I,0FF
	AND AY,RBRICK
	BNE 1$
	LDA VPOSBL
	LSR
	LSR
	LSR
	LSR
	TAY
1$:	LDA T7
	AND AY,RBRICK		;DROP BRICK HIT
	STA AY,RBRICK
	INC RBCNT		;INCR. BRICK COUNT
	LDA T7
	EOR I,0FF
	AND I,7
	BEQ 2$
	LDA I,80
	STA T9
	BIT HMVBL
	BMI 3$
	LDA I,3
	STA HMVBL
	BNE 2$
3$:	LDA I,0FD
	STA HMVBL
2$:	LDA I,80
	STA BRIKF
	LDA T6
	JSR SCBK0
	JSR RHMVBL		;REFLECT BALL HORZ.
	JMP EXCOL		;SCORE LEFT PLAYER/TEAM
NEXT:	DEX
	BPL RTCOL
	TAX
BKEX:	JMP ACT2
LTCOL:	CMP AX,LTB
	BCS NEXTT
	CMP AX,LTA
	BCC NEXTT
	LDA AX,LPNTS		;GET POINTS FOR BRICK
	STA T6
	LDA AX,RTC		;GET DELETE MASK
	STA T7
	EOR I,0FF
	AND AY,LBRICK
	BNE 1$
	LDA VPOSBL
	LSR
	LSR
	LSR
	LSR
	TAY
1$:	LDA T7
	AND AY,LBRICK		;DROP BRICK HIT
	STA AY,LBRICK
	INC LBCNT		;INCR. BRICK COUNT
	LDA T7
	EOR I,0FF
	AND I,38
	BEQ 2$
	LDA I,80
	STA T9
	BIT HMVBL
	BMI 3$
	LDA I,3
	STA HMVBL
	BNE 2$
3$:	LDA I,0FD
	STA HMVBL
2$:	LDA I,80
	STA BRIKF
	JSR RHMVBL		;REFLECT BALL HORZ.
	LDA T6
	JSR SCBK1
EXCOL:	LDA T6
	CLC
	ADC AUDBK
	STA AUDBK
	JMP FRAME1		;SCORE RIGHT PLAYER/TEAM
NEXTT:  DEX
	BPL LTCOL
	TAX
	JMP ACT2
;VOLLEYBALL SCORING
VBSCOR:	BIT VPOSBL		;TOP OF SCREEN?
	BPL NOSCOR		;BOUNCE IF TOP
	CPY I,7			;HIT GROUND?
	BMI NDGOL1		;YES, WHICH SIDE?
	BIT CXBLPF		;HIT NET?
	BPL NOSCOR
	CPX I,31.		;NET?
	BNE NOSCOR		;NOT YET
	BIT HMVBL		;IF NET, WHO HIT IT
	BPL NSCR0		;DIRECTION, AND SCORE
	BMI NSCR1		;APPROPRIATELY
;HANDBALL SCORING
HBSCOR:	LDA ACTIVE		;WHO LAST HIT
	BMI NOSCOR		;NO SCORE IF NOT HIT
	BIT HMVBL		;IS BALL MOVING TO RIGHT
	BPL NOSCOR		;IF TO LEFT, NO SCORE
	LDX HPOSBL		;TEST FOR FAR RIGHT
	CPX I,180.		;TEST IF OUT OF PLAY
	BCC HBSCR1		;BRANCH IN PLAY
	AND I,1			;SOMEONE MISSED, BUMP
	BEQ NSCR0		;SCORE OF LAST HITTER
	BNE NSCR1
HBSCR1:	TAY			;SET FOR POSSIBLE
	AND I,1			;SCORE FOR OPPOSITE TEAM
	EOR I,1			;AND SAVE POINTER IN X
	TAX			;DID THE LAST HITTER
	LDA AY,CXP0FB		;HIT IT AGAIN?
	LDY ACTIV2		;OR DID THE TEAMMATE
	ORA AY,CXP0FB		;HIT IT?
	ASL			;SHIFT TO BIT 7
	BPL NOSCOR
	TXA
	BEQ NSCR0
	BNE NSCR1		;BUMP SCORE
;HOCKEY SCORING
CGOAL:	CPY I,13.		;CHECK SIDE CGOAL
	BMI NOSCOR		;NO GOAL, EXIT
	CPX I,18.		;TEST FOR GOAL ZONE
	BEQ NDGOL1		;IF SCORE, FOR WHOM
;QUADRAPONG TOP/BOTTOM GOALS
SDGOAL:	CPY I,4			;CHECK TOP GOAL
	BNE ENDGOL		;NOT TOP/BOTTOM GOAL
	BIT VPOSBL		;TOP/BOTTOM OF SCREEN?
	BPL NSCR1		;SCORE FOR RIGHT TEAM
	BMI NSCR0		;SCORE FOR LEFT TEAM
;PONG AND SOCCER SCORING
ENDGOL:	CPX I,13.		;TEST FOR LEFT GOAL
	BPL NOSCOR		;NO SCORE
NDGOL1:	BIT HPOSBL		;BALL ON WHICH SIDE
	BMI NSCR0		;SCORE FOR LEFT TEAM
	BPL NSCR1		;SCORE FOR RIGHT TEAM
;BASKETBALL SCORING
BASKET:	BIT CXBLPF		;CHECK FOR COLLISION
	BPL NOSCOR		;BRANCH NOT HIT BASKET
	CPY I,12.		;LEVEL OF BASKET BOTTOM
	BNE NOSCOR		;NO, NO SCORE
	CPX I,16.		;IN BASKET FROM WALL
	BMI NOSCOR
	BIT VMVBL		;TEST IF GOING DOWN
	BPL NDGOL1		;BRANCH IF GOING DOWN
;SCORING CONVERGENCE
NOSCOR:	LDX T0			;RESTORE X
	JMP ACT2		;GO TEST FOR BOUNCES
NSCR0:	LDA I,1			;SCORE FOR LEFT TEAM
	JSR SCBK0
	JMP BLOUT
NSCR1:	LDA I,1			;SCORE FOR RIGHT TEAM
	JSR SCBK1
BLOUT:	LDA I,5	;SET FOR SCORE NOISE
	BIT BREAKF
	BMI 1$
	LDA I,3F
1$:	STA SCORET
	LDA I,15.
	STA AUDIOT
	LDA I,0
	STA AUDBK
	JMP FRAME1		;RETURN
;BALL/WALL BOUNCING SYSTEM
;BREAKOUT PLAYFIELD BOUNCING
BKPF:	LDX T0
	LDA VPOSBL
	CLC
	ADC I,2
	TAY
	BIT TWO
	BPL LBKPF		;PLAYER ON RT
	CPX I,32
	BCS 1$
	LDA RBLCNT
	BIT A,INPT5		;CHECK GAME TIME
	BPL 5$
	CMP I,5
	BNE 3$
	JMP LINK12
5$:	CMP I,3
	BNE 3$
	JMP LINK12
3$:	JSR BALLOT		;CHECK RESET BRICKS
	LDA I,0
	STA SMALL		;MAKE PADDLE LARGE
	STA VPOSBL
	STA BRIKF
	BIT ONE
	BMI 2$
	STA TWO
2$:	JMP BLOUT
1$:	CPX I,0CB
	BCC CKTBWL
	BIT BWLFG
	BMI 4$
	LDY VMVBL
	JSR BUMP
	STY VMVBL
4$:	LDA I,80
	STA SMALL		;MAKE PADDLE SMALL
	STA BWLFG
	DEC HPOSBL
BBREF:  LDA I,0
	STA BRIKF
	LDA I,80
BBB:	STA T2
	JMP REFMV0
LBKPF:  CPX I,0CE
	BCC L12B
	LDA LBLCNT
	BIT A,INPT5			;CHECK GAME TIME
	BPL 1$
	CMP I,5
	BEQ 2$
	BNE L12A
1$:	CMP I,3
	BNE L12A
2$:	BIT ONE
	BPL L12A
LINK12:	LDA I,80
	STA BKOVR
	LDA I,0
	STA BALOUT
L12A:	JSR BALLOT		;CHECK RESET BRICKS
	LDA I,0
	STA BRIKF
	STA VPOSBL
	STA SMALL		;MAKE PADDLE LARGE
	BIT ONE
	BMI 4$
	LDA I,80
	STA TWO
4$:	JMP BLOUT
L12B:	CPX I,35
	BCS CKTBWL
	BIT BWLFG
	BMI 1$
	LDY VMVBL
	JSR BUMP
	STY VMVBL
1$:	LDA I,80
	STA SMALL		;MAKE PADDLE SMALL
	STA BWLFG
	LDA I,36
	STA HPOSBL
	BNE BBREF
CKTBWL:	CPY I,50.
	BCS CKBTM
	INC VPOSBL
BBV:	LDA I,40
	BNE BBB
CKBTM:	CPY I,205.
	BCS 1$
	JMP ACT3
1$:	DEC VPOSBL
	BNE BBV
;BASKETBALL PLAYFIELD BOUNCING
BSKTPF:	CPY I,12.		;TEST FOR BASKETS
	BNE SOCRP1
	CPX I,17.		;CHECK OUTSIDE OF BASKET
	BMI SOCRP1
	INC VPOSBL		;STEP BALL DOWN
	ORA I,0C0		;REFLECT VM & HM FLAGS
	BNE REFMV		;CONVERGE
;HOCKEY PLAYFIELD BOUNCING
HCKYPF:	CPY I,12.		;TEST TOP OF CGOALS
	BMI SOCRP1		;NOT CGOAL
	CPX I,17.		;TOWARDS WALL FROM CGOAL?
	BMI SOCRP1		;NOT CGOAL
	CPX I,20.		;TOWARD CENTER FROM CGOAL?
	BPL SOCRP1
	CPX I,18.		;BACK OR FRONT OF CGOAL
	BEQ HPF1		;IS IT BACK OF LEFT GOAL
	ORA I,80		;LEFT CGOAL, SET RFHM
HPF1:	CPY I,12.		;SIDE OF CGOAL?
	BNE REFMV		;BRANCH NOT SIDE
	ORA I,40		;SET RFVM FLAG (BIT6)
;SOCCER, QPONG PLAYFIELD BOUNCING
SOCRPF:	CPY I,10.		;TEST FOR EDGE OF
	BNE SOCRP1
	ORA I,40		;REFLECT VERTICAL
;HANDBALL PLAYFIELD BOUNCING
SOCRP1:	CPX I,14.		;TEST FOR END WALL
	BPL PONGPF		;BRANCH NOT END WALL
	ORA I,80		;SET RFHM BIT
	LDX HPOSBL		;BUMP BALL OUT OF
	BPL SOCRP2		;END WALLS
	DEX			;IF ON RIGHT, BUMP TO LEFT
	DEX
SOCRP2:	INX			;IF LEFT, BUMP TO RIGHT
	STX HPOSBL
;PONG PLAYFIELD BOUNCING
PONGPF:	CPY I,6			;TEST TOP WALL
	BPL REFMV		;BRANCH NOT HIT
	ORA I,40		;TOP WALL, SET RFVM
	LDY VPOSBL		;BUMP BALL OUT OF WALL
	BPL PONGP1		;TO PREVENT LOCKUP
	DEY			;STEP UP 1 LINE IF IN FLOOR
	DEY			;AND BUMP DOWN 1 LINE IF IN
PONGP1:	INY			;CEILING
	STY VPOSBL
;WALL BOUNCE CONVERGENCE
REFMV:	STA T2			;SAVE REFLECT FLAGS
	ASL			;CLEAR CATCH FLAG
	STA CATCHF
	ROR			;TEST FLAGS
	BNE REFMV0		;BRANCH IF REFLECTION
	JMP ACT3		;RETURN IF NO BOUNCE
REFMV0:	BPL REFMV1		;BRANCH NOT RFHM
	JSR RHMVBL		;REFLECT HORIZ MOTION
REFMV1:	BIT T2			;TEST RFVM FLAG
	BVC REFMV2		;BRANCH NOT RFVM
	JSR RVMVBL		;REFLECT VERT MOTION
REFMV2:	LDA I,84		;SET FOR WALL
	STA AUDIOT		;BOUNCE SOUNDS
	JMP ACT4		;RETURN
RVMVBL:	LDA VMVBL2		;REFLECT VERTICAL
	JSR NEGATE		;CALL NEGATE SUBROUTINE
	STA VMVBL2		;STORE NEW MV
	LDA VMVBL		;PROPAGATE TO MS BYTE
	EOR I,0FF
	ADC I,0			;ADD IN CARRY
	STA VMVBL		;STORE NEW VALUE
	RTS
;VARIOUS UTILITIES
NEGATE:	EOR I,0FF		;NEGATE AC UTILITY
	SEC			;COMPLEMENT AND INCREMENT
	ADC I,0
	RTS

BALLOT:	LDY I,0C4		;NEW BRICK COUNT
	LDA I,3F
	BIT LBCNT
	BMI 2$
	STY LBCNT
	LDY I,9
3$:	STA AY,LBRK
	DEY
	BPL 3$
2$:	LDY I,0C4		;NEW BRICK COUNT
	BIT RBCNT
	BMI 1$
	STY RBCNT
	LDY I,9
4$:	STA AY,RBRK
	DEY
	BPL 4$
1$:	RTS

;BALL/PADDLE COLLISION SYSTEM
;FIRST, DETECT COLLISIONS
BALPDL:	LDX I,3			;CHECK FOR PADDLE
BLPDL1:	LDA ZX,CXP0FB		;CHECK COL
	ASL			;GET BALL/OBJECT IN BIT 7
	BMI CATCH		;BR IF COLLISION
	BIT CATCHF
	BVC 1$
	CPX T8
	BEQ CATCH
1$:	BIT BREAKF
	BPL 2$
	CPX I,2
	BEQ 3$
2$:	DEX			;IF NO HIT, CHECK NEXT ONE
	BPL BLPDL1
	INX			;CLEAR CATCH FLAG
	STX CATCHF
3$:	RTS			;NO HITS-RETURN
;IF COLLISION, TEST FOR CATCH
CATCH:	LDA I,0
	STA BRIKF
	STA BWLFG
	STA AUDBK
	BIT BREAKF
	BPL 1$
	JSR BALLOT
1$:	BIT GMCOD1		;IS CATCH LEGAL?
	BVC BLPDCN		;NOT LEGAL-IGNORE
	LDY ZX,VPOS0		;GET CURRENT VARIABLE
	LDA ZX,HVP0		;COORDINATE INTO Y
	BPL CATCH1		;BRANCH IF VERT PADDLE
	LDY ZX,HPOS0		;IF HORIZ, LOAD HPOS
CATCH1:	BIT CATCHF		;ALREADY CAUGHT?
	BVS CATCH2		;BRANCH IF CAUGHT
	STY LSTPOS		;INITIALIZE LAST POS
	LDA I,84.		;MAKE SOME NOISE
	STA AUDIOT
CATCH2: LDA CATCHF
	STA T3
	LDA ZX,BUT0		;TEST IF STILL
	EOR I,40		;TOGGLE BIT 6
	AND GMCOD1		;MASK WITH FLAG
	STA CATCHF		;SAVE NEW CATCH STATE
	BEQ BASKCK		;NOT CAUGHT, BOUNCE
	TXA
	STA T8			;SAVE PADDLE NUMBER THAT MADE CATCH
	ORA CATCHF
	STA CATCHF
	TYA			;CAUGHT, FIND PADDLES MOTION
	SEC			;BY SUBTRACTING LAST POSITION
	SBC LSTPOS		;AND THEN UPDATING
	STY LSTPOS		;THE LAST POSITION
	CLC			;THEN ADD THAT CHANGE TO THE
	LDY ZX,HVP0		;APPROPRIATE BALL COORDINATE
	BPL CATCH3		;BRANCH IF VERT PADDLE
	ADC HPOSBL		;STEP HPOS TO FOLLOW
	STA HPOSBL		;THE PADDLE
	RTS			;DON'T BOUNCE
CATCH3:	ADC VPOSBL		;STEP BALL TO
	STA VPOSBL		;THE PADDLE
	RTS
BASKCK: BIT T3
	BVC BLPDCN
	STA T3			;TEST FOR BASKET BALL
;BALL HIT
BLPDCN:	LDA I,0C4		;IF PADDLE, SET
	STA AUDIOT		;FOR PADDLE SOUNDS
	INC HITS		;COUNT PADDLE HITS
	STX ACTIVE		;WHO HIT IT LAST
;DO SPEEDUP
	LDA PCOD2		;IF AUTO, AT WHAT RATE
	AND I,3			;BOTTOM ITS IN PCOD2
	TAY			;FETCH SPEEDUP MASK
	LDA HITS		;COUNT HITS
	BEQ BPCN2		;EXIT IF NO HITS
	AND AY,SPDMSK		;TEST HITS, AND
	BNE BPCN2		;DECODE 4TH, 8TH AND 16TH
	BIT BREAKF
	BPL SPEDUP
	BIT T9
	BMI BPCN2
	LDA HITS
	CMP I,4
	BEQ SPDH
	CMP I,8
	BNE 1$
	LDA I,0FE
	STA SNFLG
	LDA I,0
	STA HMVBL
	BEQ SPEDUP
1$:	CMP I,12.
	BNE BPCN2
	LDA I,0
	STA SNFLG
	LDA I,80
	STA T9
SPEDUP:	LDY VMVBL		;DO THE SAME FOR
	JSR BUMP		;THE VERTICAL MOTION
	STY VMVBL
SPDH:	LDY HMVBL		;BUMP IN SAME
	JSR BUMP		;INC OR DEC
	STY HMVBL		;SAVE RESULT
BPCN2:	LDA ZX,HVP0		;TEST FOR V/H IN
	BMI HPDCXN		;BRANCH IF HORIZONTAL
;BALL HIT VERTICAL PADDLE
	LDA I,8			;TEST BIT 3 OF VERTICAL
	AND ZX,VMSK0		;MASK, =1 IF SMALL
	STA T0			;PADDLE
	EOR I,8			;=8 IF LARGE, =0 IF SMALL
	LSR			;4=OFFSET FOR LARGE PADDLE
	ADC I,3			;OFFSET FOR BALL SIZE
	ADC ZX,VPOS0		;TO CENTER OF PADDLE
	SBC VPOSBL		;FIND BALL'S OFFSET
	AND I,3F
	LSR			;ERRORS, /2, AND SIGN
	CMP I,10		;EXTEND FROM BIT 4
	BCC BPCN3		;BRANCH IF +
	ORA I,0E0		;EXTEND IF -
BPCN3:	JSR NEGATE		;BOUNCE UP IF
	LDY T0			;ABOVE CENTER.  TEST IF
	BNE BPCN4		;BRANCH IF SMALL PADDLE
	CMP I,80		;DIVIDE BY 2 IF LARGE
	ROR
BPCN4:	STA VMVBL
	BIT BREAKF
	BPL 1$
	CMP I,0
	BNE 2$
	CLC
	LDA FRAMES
	AND I,2
	ADC I,0FF
	STA VMVBL
2$:	BIT T9
	BMI 1$
	LDA HITS
	CMP I,8
	BMI 1$
	CMP I,12.
	BPL 1$
	ASL VMVBL
1$:	BIT PCOD2		;TEST IF ALWAYS REFLECT
	SEC			;ALL PADDLES ON RIGHT
	BMI BPCN5		;IF SET, BOUNCE TO LEFT
	TXA			;WHICH TEAM HIT IT? - WHICH
	LSR			;DIRECTION SHOULD IT HAVE
BPCN5:	LDA HMVBL		;TEST OLD DIRECTION
	BCC BPCN6		;IF TEAM 02, SHOULD
	EOR I,80		;NEGATIVE
BPCN6:	BPL RHMVBL		;IF WRONG, REFLECT
	RTS
;BALL MOTION UTILITIES
RHMVBL:	LDA HMVBL		;REFLECT BALL
	JSR NEGATE		;HORIZONTAL MOTION
	STA HMVBL		;VECTOR
	RTS
BUMP:	BPL BUMP2		;BRANCH IF +
	DEY			;DEC IF -, AND LIMIT TO -4
	CPY I,0FC		;TEST FOR >-5
	BCS BUMP1		;BRANCH IF >-5
	LDY I,0FC		;JAM WITH -4
BUMP1:	RTS
BUMP2:	INY			;INC IF +
	CPY I,5			;AND LIMIT TO +4
	BMI BUMP3		;BRANCH IF <5
	LDY I,4			;JAM WITH +4
BUMP3:	RTS			;DONE
;BALL HIT HORIZONTAL PADDLE
HPDCXN:	TXA			;COMPUTE INDEX:
	AND I,2			;PLAYER VS MISSILE, AND
	TAY			;A VS B DIFFICULTY
	STA T2			;STORE PLAYER/MISSILE STATE
HPD1:	LDA ZX,HPOS0		;COMPUTE OFFSET FROM
	CLC			;CENTER OF PADDLE TO BALL
	ADC AY,CENTBL
	SBC HPOSBL
	STA T0			;SAVE FOR SIGN
	LDY T2			;TEST IF PLAYER
	BNE HPD2		;BRANCH NOT PLAYER
	CMP I,80		;SET CARRY W/BIT 7
	ROR			;DIVIDE BY 2
HPD2:	CMP I,80		;SAME SIGN EXTEND TRICK
	ROR			;DIVIDE AGAIN
HPD3:	STA HMVBL		;NEW HORIZ MOTION
	JMP RVMVBL		;REFLECT VERTICAL MOTION
CENTBL:	.BYTE 12.,7,4,2		;CENTER OFFSETS
;MOVE BALL TO NEW POSITION
STPBAL:	LDA HPOSBL		;CHECK IF CAUGHT
	BIT CATCHF		;IF CAUGHT, DON'T
	BVS STPB4		;STEP BALL
	CLC
	LDA VMVBL2		;BYTES OF VERTICAL
	ADC VPOSB2		;POSITION,
	STA VPOSB2
	LDA I,0			;CLEAR FOR NEXT ADDITION
	BIT GMCOD1		;TEST FLIMFLAM BIT
	BPL STPB1		;BRANCH NOT FLIMFLAM
	BIT ACTBUT		;TEST IF ACTIVE
	BMI STPB1		;TEST NOT ACTIVE
	LDA VMVBL		;FF=DOUBLE VMV
STPB1:	ADC VMVBL		;STEP BALL
	CLC			;(I HATE THIS!)
	ADC VPOSBL		;AND UPDATE VERTICA
	STA VPOSBL		;POSITION
	EOR I,1			;COMPLEMENT LSB
	STA VDELBL		;INCLUDING BIT0 TO VDEL
	SEC			;LOAD AND UPDATE HORIZONTAL
	LDA HPOSBL
	SBC HMVBL
	STA HPOSBL
STPB4:	LDX I,4			;POINT TO BALL
	JSR CHRST		;MOVE BALL
	RTS			;DONE MOVING BALL
;COIN VALIDATION ROUTINE ...................................................
CVALID:	LDX I,1
CVAL2:	LDA ZX,CV1
	BEQ CVAL1
	LDA SLMFLG
	BNE 1$
3$:	STA AX,CVA
5$:	STA ZX,CV2
	BEQ CVAL1
1$:	LDA SLAMTM
	BEQ 2$
6$:	LDA I,0
	BEQ 3$
2$:	LDA AX,CVA
	BMI 4$
	LDA I,7
	STA ZX,CNT2
	LDA I,80
	STA AX,CVA
	LDA I,53		;SET COUNTER FOR 1.3 SEC AT 60 HZ.& 1.6 SEC AT 50 HZ.
	STA AX,CNSTK
	LDA I,0
	BEQ 5$
4$:	LDA AX,CNSTK
	BEQ 8$
	DEC AX,CNSTK
	BNE 8$
	LDA I,80
	STA AX,STUCK
	BNE CVAL1
8$:	LDA ZX,CV2
	BEQ CVAL1
	NOP
	LDA I,0
	LDA I,0
	STA ZX,CV1
	STA AX,CVA
	STA ZX,CV2
	STA AX,CNSTK
	LDY AX,STUCK
	BPL 7$
	STA AX,STUCK
	BMI CVAL1
7$:	SEC
	BCS CVAL3
CVAL1:	CLC
CVAL3:	ROL AX,PIPE0
	ROL AX,PIPE1
	LDA A,SWA
	AND I,0F
	STA T1
	BCC 3$
	BNE 8$
	INC A,FCNCTR
	BNE 9$
8$:	CMP I,6
	BEQ 2$
	CMP I,0C
	BEQ 2$
	LDA A,FIRST
	BEQ 2$
	INC AX,RCNCTR
	BNE 3$
2$:	INC AX,FCNCTR
9$:	LDA I,80
	STA A,FIRST
3$:	TXA
	ASL
	ASL
	ASL
	ASL
	CLC
	ADC T1
	TAY
	STA T4
	LDA AY,CCTBL
	TAY
	AND I,0F
	STA T1
	TYA
	LSR
	LSR
	LSR
	LSR
	TAY
6$:	LDA AX,FCNCTR
	BEQ 4$
	SEC
	SBC T1
	BCC 1$
	STA AX,FCNCTR
	TYA
	CLC
	ADC CRED
	STA CRED
	BNE 6$
4$:	LDA AX,RCNCTR
	BEQ 1$
	LDY T4
	LDA AY,CCTBL+20
	LSR
	LSR
	LSR
	LSR
	STA T1
	CLC
	LDA CRED
7$:	ADC T1
	BCS 1$
	STA CRED
	DEC AX,RCNCTR
	BNE 7$
1$:	DEX
	BMI 5$
	JMP CVAL2
5$:	RTS

;COIN SAMPLING ROUTINE FOR USE IN VBLANK ONLY ................................
CN2:	BIT ATFLG
	BMI 1$
	RTS
1$:	LDA T10
	LDY I,7
	BNE CN6
COININ:	BIT ATFLG
	BMI 9$
	RTS
9$:	BIT A,ITFLG		;D7 =1 WHEN TIMER RAN OUT
	BMI CN1
	RTS
CN1:	LDY I,7
	LDA T10
CN6:	AND I,1
	BNE CN4
CN3:	TAX
	LDA A,COIN0
	JMP CN5
CN4:	TAX
	LDA A,COIN1
CN5:	BMI 3$
	DEC ZX,CNT1		;DECR. 1'S COUNT
	BNE 4$
	INC ZX,CV1		;SET 1'S FLAG
4$:	STY ZX,CNT2		;RESET 0'S COUNT
	BNE 6$
3$:	DEC ZX,CNT2		;DECR. 0'S COUNT
	BNE 5$
	INC ZX,CV2		;SET 0'S FLAG
5$:	STY ZX,CNT1		;RESET 1'S COUNT
6$:	BIT A,COIN1		;CHECK SLAM SWITCH IN BIT 6
	BVS 7$
	LDA I,0
	STA SLMFLG
7$:	LDA I,19.			;RESET 16-LINE-TIME COUNT IN I.T.
	STA A,T64
	INC T10
	RTS

; OUTPUT ROUTINES START ....................................................

;PADDLE GAMES (LESS BREAKOUT) OUTPUT KERNEL ...................................
PVOUT:	TSX			;2
	STX T1			;3
	LDX I,ENAM0		;2;POINT STACK AT M0
	TXS			;2
	LDX I,41.		;2;START LINE COUNTER
	LDA I,15		;2;SET PF FOR GAME;PF HAS PRIOR,REFLECT PF,BALL WIDTH-2
	STA CTRLPF		;3
	STX T4			;3;INITIALIZE POT VALUES
	STX T5			;3
	LDY I,5
	STX WSYNC		;3
	BNE PVOT0		;3
PVOT1:	TXA			;2;FETCH LINE COUNT
	LDY I,0F0		;2;BUILD P1 GRAPHICS IN Y
	SEC			;2;(BECAUSE I HAVE TO)
	SBC VPOS1		;3;SET UP P1
	AND VMSK1		;3;MASK W/PLAYER SIZE
	BEQ PVOT2		;2;BRANCH IF ON
	LDY I,0			;2;IF OFF, TURN OFF
PVOT2:	TXA			;2;GET LINE COUNT
	INX			;2;COUNT LINE ONCE
	SEC			;2;ONE MORE TIME.....
	SBC VPOS2		;3;TEST FOR PLAYER 2(M0)
	AND VMSK2		;3;MASK FOR SIZE, NUMBER,
	PHP			;3;SERRATION, AND PUSH Z FLAG
	TXA			;2;
	LSR			;2;=LINE COUNT/8
	STY GRP1		;3
	LSR			;2;
	LSR			;2;
	TAY			;2;
PVOT0:	LDA NY,PF0P		;5;GET 1ST PF BYTE
	STA PF0			;3;OUTPUT PLAYFIELD
	LDA NY,PF1P		;5;
	STA PF1			;3;
	LDA NY,PF2P		;5;
	STA PF2			;3;
	INX			;2;BUMP LINE COUNT TWICE
	TXA			;2;SAVE NEW LINE COUNT
	LDX I,ENABL		;2;POINT STACK AT BALL
	TXS			;2;
	TAX			;2;GET LINE COUNT, TO
	LDY I,0F0		;2;BUILD P0 GRAPHICS INY
	SEC			;2;
	SBC VPOS0		;3;CHECK FOR P0
	AND VMSK0		;3;
	BEQ PVOT3		;2/3;BRANCH IF ON
	LDY I,0			;2;CLEAR IF OFF
PVOT3:	TXA			;2;GET LIN COUNT FOR BALL
	SEC			;2;I HATE THIS
	SBC VPOSBL		;3;TEST FOR BALL ON
	AND I,0FC		;3;MASK FOR BALL SIZE
	PHP			;3;OUTPUT BALL ENABLE (Z BIT)
	STX WSYNC		;3;START LINE PAIR
CONTIN:	STY GRP0		;3;OUTPUT P0 GRAPHICS
	TXA			;2;GET LINE COUNT, AND DERIVE
CONT:	SEC			;2;(I HATE THIS!)
	SBC VPOS3		;3;M1 ENABLE
	AND VMSK3		;3;MASK FOR PADDLE SIZE
	PHP			;3;OUTPUT M1 ENABLE
	LDY T0			;3;FETCH POINTER TO POT PAIR
	LDA AY,INPT0		;4;TEST IF PORT TOGGLED
	BMI PVOT4		;2/3;TRUE, AND STORE LINE
	STX T4			;3;COUNT IF NOT YET TRUE
PVOT4:	LDA AY,INPT2		;4;TEST 2ND POT
	BMI PVOT5		;2/3;THE SAME WAY
	STX T5			;3;
PVOT5:	CPX I,216.		;2;TEST FOR END FRAME
	BNE PVOT1		;2/3;
	LDX T1			;RECOVER AND
	TXS			;RESTORE STACK POINTER
	JSR BLKLN		;1 BLANK LINE
	LDA T4			;TRANSFER POT DATA FROM; 0 OR 1 FOR FRAME EVEN OR ODD
	LDX T0			;BUFFERS TO P)
	BNE 1$
	LDY GAMVAL
	CPY I,8
	BCS 5$
	CPY I,6
	BEQ 1$
	JSR NEGATE
	STA T4
	BNE 1$
4$:	JSR NEGATE
	STA T4
5$:	TAY
	LDA T5
	JSR NEGATE
	STA T5
	TYA
1$:	BIT QPONGF
	BMI 3$
2$:	LDA T5
3$:	CLC			;AVERAGE WITH LAST VALUE
	ADC ZX,PAD2
	ROR
	STA ZX,PAD2
	LDA T4
	CLC
	ADC ZX,PAD0
	ROR
	STA ZX,PAD0
	RTS			;FRAME DONE

;BREAKOUT OUTPUT KERNEL .......................................................
BVOUT:	LDA I,15			;SET PF COL;PF HAS PRIOR;REFLECT;BALL-2W
	STA CTRLPF
	TSX			;2;GET STACK POINTER;END HBLANK;66 CLOCKS SINCE WSYNC
	STX T1			;3;SAVE TIL END FRAME
	LDX I,ENAM0		;2;POINT STACK AT M0
	TXS			;2;
	LDX I,44.		;2;START LINE COUNTER
	STX T4			;3;INITIALIZE POT VALUES
	STX T5			;3;
	STY WSYNC
	LDA I,0FF
	STA PF0
	STA PF1
	STA PF2
	LDA I,0
	STA GRP0
5$:	STY WSYNC
	TXA
	SEC
	SBC VPOS2
	AND VMSK0
	PHP
	INX
	TXA
	LDX I,ENAM1
	TXS
	TAX
	SEC
	SBC VPOS3
	AND VMSK1
	STY WSYNC
	PHP
	INX
	LDY T0
	LDA A,INPT2
	BMI 3$
	STX T4
3$:	LDA A,INPT3
	BMI 4$
	STX T5
4$:	CPX I,48.
	BNE 5$
	LDA I,0
	LDY I,10
	BIT TWO
	BMI 1$
	STY BPF0A
	STA BPF0B
	TYA
	BNE 2$
1$:	STY BPF0B
	STA BPF0A
2$:	STY WSYNC
	STA PF0
	LDA I,0
	STA PF1
	STA PF2
	LDA NY,PF0P		;FILL FOR TIME FOR WALL SEGMENTS
	LDA NY,PF0P		;FILL FOR TIME FOR WALL SEGMENTS
	LDA NY,PF0P		;FILL FOR TIME FOR WALL SEGMENTS
	LDA NY,PF0P		;FILL FOR TIME FOR WALL SEGMENTS
	LDA NY,PF0P		;FILL FOR TIME FOR WALL SEGMENTS
	LDA NY,PF0P		;FILL FOR TIME FOR WALL SEGMENTS
	LDA NY,PF0P		;FILL FOR TIME FOR WALL SEGMENTS
BVOT1:	TXA			;2;FETCH LINE COUNT
	LSR			;2
	LSR			;2
	LSR			;2
	LSR			;2
	TAY			;2
	LDA BPF0B
	STA PF0
	BIT TWO			;3
	BPL 1$			;2/3
	LDA AY,AMSK		;4
	AND AY,RBRICK		;4
	STA T6			;3
	LDA BPF0A		;3

	STA PF0			;3
	LDA AY,BMSK		;4
	AND AY,RBRICK		;4
	JMP 2$			;3
1$:	LDA AY,AMSK		;4
	AND AY,LBRICK		;4
	STA T6			;3
	LDA BPF0A		;3
	STA PF0			;3
	LDA AY,BMSK		;4
	AND AY,LBRICK		;4
2$:	TAY			;2
BVOT2:	TXA			;2;GET LINE COUNT
	INX			;2;COUNT LINE ONCE
	SEC			;2;ONE MORE TIME.....
	SBC VPOS2		;3;TEST FOR PLAYER 2(M0)
	AND VMSK0		;3;MASK FOR SIZE, NUMBER,
	PHP			;3;SERRATION, AND PUSH Z FLAG;Z=1 MEANS ENABLE
	LDA BPF0B		;3
	STA PF0			;3
	STY GRP0		;3
	LDY T6			;3
	STY GRP1		;3
	INX			;2;BUMP LINE COUNT TWICE
	TXA			;2;SAVE NEW LINE COUNT
	LDX I,ENABL		;2;POINT STACK AT BALL
	TXS			;2;
	TAX			;2
	SEC			;2;I HATE THIS;LINE COUNT IN ACC.
	SBC VPOSBL		;3;TEST FOR BALL ON
	AND I,0FC		;2;MASK FOR BALL SIZE
	STX WSYNC		;3;START LINE PAIR
	PHP			;3;OUTPUT BALL ENABLE (Z BIT)
	LDA BPF0A
	STA PF0
	TXA			;2;GET LINE COUNT, AND DERIVE
	SEC			;2;(I HATE THIS!)
	SBC VPOS3		;3;M1 ENABLE
	AND VMSK1		;3;MASK FOR PADDLE SIZE
	PHP			;3;OUTPUT M1 ENABLE
	LDY T0			;3;FETCH POINTER TO POT PAIR
	LDA A,INPT2		;4;TEST IF PORT TOGGLED
	BMI BVOT4		;2/3;TRUE, AND STORE LINE
	STX T4			;3;COUNT IF NOT YET TRUE
BVOT4:	LDA A,INPT3		;4;TEST 2ND POT
	BMI BVOT5		;2/3;THE SAME WAY
	STX T5			;3;
BVOT5:	CPX I,208.		;2;TEST FOR END FRAME
	BNE BVOT1		;2/3;
	STY WSYNC
	LDA I,0FF
	STA PF0
	STA PF1
	STA PF2
	LDA I,0
	STA GRP0
	STA GRP1
5$:	STY WSYNC
	TXA
	SEC
	SBC VPOS2
	AND VMSK0
	PHP
	TXA
	LDX I,ENAM1
	TXS
	TAX
	SEC
	SBC VPOS3
	AND VMSK1
	PHP
	INX
4$:	CPX I,213.
	BNE 5$
	LDX T1			;RECOVER AND
	TXS			;RESTORE STACK POINTER
	LDY I,4
	JSR BLKLN		;1 BLANK LINE
6$:	STX WSYNC
	DEY
	BNE 6$
	CLC
	LDA I,195.
	BIT SMALL
	BPL 1$
	ADC I,8
1$:	CMP T5
	BCS 2$
	STA T5
2$:	CMP T4
	BCS 3$
	STA T4
3$:	LDA T5			;BUFFERS TO P)
	CLC			;AVERAGE WITH LAST VALUE
	ADC Z,PAD3
	ROR
	STA Z,PAD3
	LDA T4
	CLC
	ADC Z,PAD2
	ROR
	STA Z,PAD2
	RTS			;FRAME DONE

;ATTRACT OUTPUT KERNEL .......................................................
APVOUT:	LDX I,40.		;2;START LINE COUNT
	LDA I,11		;2
	STA CTRLPF		;3
	LDY I,0			;2
	STY T10			;3
AP12:	LDY T10			;3
	TXA			;2
	PHA			;3;SAVE LINE COUNT
	EOR I,8			;2
	AND I,0F		;2
	LSR			;2
	BNE 1$			;2/3
	INC T10			;5
	PHA			;3
	TYA			;2
	LDX I,0			;2
	AND I,1			;2
	BEQ 2$
	INX			;2
	LDY A,COIN1		;4
	LDA I,0			;2
	BEQ APV1		;3
2$:	LDY A,COIN0		;4
	JMP APV1		;3
1$:	TAX			;2
	PHA			;3;SAVE INDEX LINE NUMBER
	LDA AX,LYNTAB-1		;4
	CLC			;2
	ADC AY,MSG1-1		;4;Y=CHAR # OF MESSAGE
	TAX			;2
	LDA AX,CHRTAB		;4
APV1:	STA WSYNC
	STA GRP0		;3
	PLA			;3
	BNE APV3		;2/3
	TYA			;2; COIN SWITCH TO "A"
	BMI 1$			;2/3
	DEC ZX,CNT1		;6;DECR. 1'S COUNT
	BNE 2$			;2/3
	INC ZX,CV1		;6;SET 1'S FLAG
2$:	LDA I,7			;2
	STA ZX,CNT2		;4;RESET 0'S COUNT
	BNE CKSLAM		;3
1$:	DEC ZX,CNT2		;6;DECR. 0'S COUNT
	BNE 3$			;2/3
	INC ZX,CV2		;6;SET 0'S FLAG
3$:	LDA I,7			;2
	STA ZX,CNT1		;4;RESET 1'S COUNT
CKSLAM:	LDA I,0			;2
	BIT A,COIN1		;4
	BVS APV2		;2/3
	STA SLMFLG		;3
	BEQ APV2
APV3:	TAX			;2
	LDA AX,LYNTAB-1		;4;END LINE
	ADC AY,MSG2-1		;4
	TAX			;2
	LDA AX,CHRTAB		;4
APV2:	STA GRP1		;3
	PLA			;3
	TAX			;2
	INX			;2;RETURN LINE COUNT
	LSR			;2
	LSR			;2
	LSR			;2
	TAY			;2
	LDA NY,PF0P		;5
	STA WSYNC		;3
	STA PF0			;3
	LDA NY,PF1P		;5
	STA PF1			;3
	LDA NY,PF2P		;5
	STA PF2			;3
LINCK:	INX			;2
	CPX I,216.		;2
	BEQ BLKLN			;2/3
	JMP AP12		;3
BLKLN:	STA WSYNC
	LDA I,0
	STA ENABL
	STA PF0
	STA PF1
	STA PF2
	STA GRP0
	STA GRP1
	STA ENAM0
	STA ENAM1
	RTS			;WHO CARES?

BKSOUT:	LDA I,2
	STA CTRLPF
	LDY I,0
	LDX I,1
BKSLP1:	STA WSYNC		;3
	BIT BALOUT			;3
	BMI 1$			;2/3
	LDA AY,MSD0		;4
	STA PF1			;3
	LDA AY,LSD0		;4
	STA PF2			;3
3$:	BIT ATFLG		;3
	BMI 2$			;2/3
	BIT BALOUT			;3
	BVC 5$			;2/3
	LDA I,2			;2; DELAY
	STA T7			;3
	STA T7			;3
	STA T7			;3
	STA T7			;3
	LDA AY,BAL0		;4
	STA PF1			;3
	LDA I,0			;2
	STA PF2			;3
4$:	TXA			;2
	INX			;2
	AND I,3			;2
	BNE BKSLP1		;2/3
	INY			;2
	CPY I,5			;2
	BNE BKSLP1		;2/3
	JMP BLKLN		;3
1$:	LDA AY,BAL1		;4
	STA PF1			;3
	LDA I,0			;2
	STA PF2			;3
	BEQ 3$			;3
2$:	LDA I,0			;2
	STA T7			;3
	STA T7			;3
5$:	STA T7			;3
	LDA AY,MSD1		;4
	STA PF1			;3
	LDA AY,LSD1		;4
	STA PF2			;3
	JMP 4$			;3

	.BYTE 96			;CHECKSUM CODE FOR 2ND ROM

BKSSET:	LDA FRAMES
	AND I,1
	TAX
	STX T6
	TXA
	ASL
	TAX
	LDA AX,WERTBL
	STA SCRD0		;MSD
	LDA AX,WERTBL+1
	STA SCRD0+1
	LDA AX,WERTBL+4
	STA SCRD1		;LSD
	LDA AX,WERTBL+5
	STA SCRD1+1
	LDA AX,WERTBL+8
	STA SCUD0H		;BALL
	LDA AX,WERTBL+9
	STA SCUD0H+1
	LDX T6
	LDA ZX,SCRP0M		;MSD'S P0
	BRK
	NOP
	AND I,0F
	BNE 10$
	LDY I,4
1$:	STA NY,SCRD0
	DEY
	BPL 1$
	LDA ZX,SCRP0M
	BEQ 30$
	BNE 20$
10$:	TAY
	LDX AY,TYMZ5
	LDY I,4
11$:	LDA AX,SCRTBL
	ASL
	AND I,0F0
	STA NY,SCRD0
	DEX
	DEY
	BPL 11$
20$:	LDX T6
	LDA ZX,SCRP0M
	AND I,0F
	TAY
	LDX AY,TYMZ5
	LDY I,4
21$:	LDA AX,SCRTBL
	ASL
	AND I,0F
	ORA NY,SCRD0
	STA NY,SCRD0
	DEX
	DEY
	BPL 21$
30$:	LDX T6
	LDA ZX,SCP0		;LSD'S P0
	AND I,0F
	TAY
	LDX AY,TYMZ5
	LDY I,4
31$:	LDA AX,SCRTBL
	STX T7
	AND I,0F
	TAX
	LDA AX,CONTBL
	LSR
	AND I,0F0
	LDX T7
	STA NY,SCRD1
	DEX
	DEY
	BPL 31$
	LDX T6
	LDA ZX,SCP0
	BRK
	NOP
	AND I,0F
	TAY
	LDX AY,TYMZ5
	LDY I,4
32$:	LDA AX,SCRTBL
	STX T7
	AND I,0F
	TAX
	LDA AX,CONTBL
	LSR
	AND I,0F
	LDX T7
	ORA NY,SCRD1
	STA NY,SCRD1
	DEX
	DEY
	BPL 32$
	LDX T6
	LDA ZX,RBLCNT
	TAY
	LDX AY,TYMZ5
	LDY I,4
LPA:	LDA AX,SCRTBL
	ASL
	AND I,0F
	STA NY,SCUD0H
	DEX
	DEY
	BPL LPA
	RTS
	.BYTE 0A8			;CHECKSUM CODE FOR 3RD ROM

TEST:	SEI
	CLD
	LDX I,STKST			;SET STACK POINTER
	TXS
	LDY I,0
	LDA I,0FF
	LDX I,80
1$:	STA ZX,VSYNC		;ZPAGE RAM
	STY ZX,T0		;CLEAR TIA
	STA AX,NUMPL-80		;PAGE 4
	INX
	BNE 1$
	LDA I,0AA
	STA PF0
	STA PF1
	STA PF2
	LDX I,7F
2$:	LDA I,0FF
	CMP ZX,T0
	BEQ 3$
	TYA
	ORA I,80
	TAY
3$:	LDA I,0FF
	CMP AX,NUMPL
	BEQ 4$
	TYA
	ORA I,40
	TAY
4$:	DEX
	BPL 2$
	LDA I,0
	LDX I,7F
9$:	STA ZX,T0
	STA AX,NUMPL
	DEX
	BPL 9$
	STY SVRAM
TSTROM:	LDA I,0
	STA T4
	STA T3
	LDA I,8
	STA T5
	LDX I,10
	LDY I,0
	JSR CKSUM
	BCS 1$
	LDA I,1
	STA T3
1$:	LDX I,18
	JSR CKSUM
	BCS 2$
	LDA T3
	ORA I,2
	STA T3
2$:	LDX I,20
	JSR CKSUM
	BCS ERROM
	LDA I,4
ERROM:	ORA T3
	STA T3
	BRK
	NOP
	STA T8
	NOP
START:	LDA I,20.		;SET BREAKOUT AS THE FIRST GAME
	STA A,NUMBER
	LDA I,11.
	STA GAMVAL
GMOVR:	LDX I,0FF
	STX A,CTLSWA
	STX A,CSWA
	STX A,SWA
	STX A,PORTA
	INX
	STX A,CTLSWA
	STX A,CSWA
	STX INITF		;SET FOR INITIALIZE CYCLE
	STX COLUBK
	STX A,FIRST		;CLEAR FIRST COIN FLAG AT GAME END
	LDA I,0F0
	STA A,CSWB
	LDA I,01
	STA A,CTLSWB
	LDA A,NUMBER
	STA GAMNUM
	LDA PFCOL
	STA COLUPF
	LDA P0COL
	STA COLUP0
	LDA P1COL
	STA COLUP1
	LDA I,80
	STA A,GSLED
	STA ATFLG		;SET ATTRACT FLAG
	BIT BONUS
	BMI 2$
	BVC 1$
2$:	STA BONFLG
	STX BONUS
	BVS TESTB
1$:	STX BONFLG
TESTB:	BIT A,TESTSW
	BVS TESTA
	JMP VBLKST
TESTA:	LDY I,19.		;60 HZ.
	LDA I,10
	BIT A,PORTB		;TEST 50/60
	BEQ 6$
	LDY I,51.		;50 HZ.
6$:	LDX I,82
	STX WSYNC
	STX VBLANK		;START VBLANK
	STY A,TIM64T
	LDA I,0			;PULSE WATCHDOG
	STA A,PORTB
	LDA I,1
	STA A,PORTB
	LDA I,0
	STA INITF
	STA COLUBK
	STA NUSIZ0
	STA NUSIZ1
	LDX I,21.
1$:	STA AX,MSG1
	DEX
	BPL 1$
	LDA I,0E
	STA COLUPF
	STA COLUP0
	STA COLUP1
	LDA A,PORTA
	AND I,0F0
	EOR I,0F0
	STA T2
	LDA A,COIN0
	AND I,80
	EOR I,80
	ORA T2
	STA T2
	LDA A,COIN1
	AND I,0C0
	EOR I,0C0
	ORA T2
	STA T2
	LDA A,STWRD
	AND I,0E
	LSR
	STA T1
	LDA A,PORTB
	AND I,2
	ASL
	ASL
	ORA T1
	STA T1
	ASL
	ASL
	ASL
	ASL
	STA A,STWRD		;LED'S ON IF SWITCH OFF
	ORA T1
	EOR I,0FF
	BNE SNDON
SNDOFF:	LDA T2
	BNE SNDON
	STA AUDV1
	STA AUDF1
	STA AUDC1
	BEQ VB1
SNDON:	LDA I,6
	STA AUDC1
	LDA I,1F
	STA AUDF1
	STA AUDV1
VB1:	LDA A,TFLG1
	BPL VB1
	LDX I,3
	STX WSYNC
	STX VSYNC		;SET VSYNC PULSE
	STA HMCLR
	STX A,TIM64T		;SET VSYNC TIMER
	LDY SVRAM
	BPL 5$
	LDX I,2			;B
	LDA I,4			;D
	BNE 6$
5$:	LDX I,0F		;O
	LDA I,0B		;K
6$:	STX A,MSG1+3
	STA A,MSG2+3
	TYA
	ASL
	BPL 7$
	LDA I,6
	STA AUDF0
	LDA I,0F
	STA AUDV0
	LDX I,2			;B
	LDA I,4			;D
	STA AUDC0
	BNE 8$
7$:	LDA I,0
	STA AUDC0
	STA AUDF0
	STA AUDV0
	LDX I,0F		;O
	LDA I,0B		;K
8$:	STX A,MSG1+2
	STA A,MSG2+2
SYNEND:	LDX I,0			;MAY INSERT CODE HERE
2$:	LDA A,TFLG1
	BPL 2$
	STX WSYNC
	STX VSYNC		;CLEAR VSYNC PULSE
	LDY I,50.		;60 HZ.
	LDA I,10
	BIT A,PORTB		;TEST FOR 50/60 HZ.
	BEQ 4$
	LDY I,80.		;50 HZ.
4$:	STY A,TIM64T
TSTRMA:	LDA T3
	BNE 1$
	LDA I,0F		;O
	STA A,MSG1+1
	LDA I,0B		;K
1$:	STA A,MSG2+1
CMOD:	LDA A,SWA
	AND I,0F
	CLC
	ADC I,1
	STA A,MSG2+4
	BNE BBONUS
1$:	SBC I,9
	CLC
	ADC I,1B
	STA A,MSG2+4
	LDA I,1B
	STA A,MSG1+4
BBONUS: LDY I,0
	LDA A,PORTA
	AND I,0F
	SEC
	SBC I,11.
	BPL 1$
	LDA I,0
1$:	CLC
	ADC I,1
	BIT A,INPT4
	BMI 2$
	LDY I,0E		;N
	LDA I,0F		;O
2$:	STY A,MSG1+5
	STA A,MSG2+5
GTYME:	LDA I,1B		;1
	STA A,MSG1+6
	BIT A,INPT5
	BMI 1$			;ON LONG
	LDA I,1B		;1
	STA A,MSG2+6
	LDA I,1D		;3
	STA A,MSG2+7
	BNE TSTEND
1$:	LDA I,1F		;5
	STA A,MSG2+6
	STA A,MSG2+7
TSTEND: LDX I,0
	LDA I,74
	JSR CHRST
	INX
	LDA I,7C
	JSR CHRST
VBEND:	LDA A,TFLG1		;MAY INSERT CODE HERE
	BPL VBEND
	LDA I,0
	STA CXCLR
	STA WSYNC
	STA HMOVE
	STA VBLANK		;CLEAR VBLANK
	JSR TSTOUT		;OUTPUT WORD "TEST" TO SCREEN
	JSR TPVOUT		;MESSAGE OUT
	JMP TESTB

CKSUM:	LDA I,52
1$:	CLC
	ADC NY,T4
	DEY
	BNE 1$
	INC T5
	CPX T5
	BNE 1$
	SEC
	AND I,0FF
	BEQ 2$
	CLC
2$:	RTS

ROTUL:	ASL
	ADC I,0
	ASL
	ADC I,0
	ASL
	ADC I,0
	ASL
	ADC I,0
	RTI

TSTOUT:	LDA I,0
	STA CTRLPF
	TAY
	LDX I,1
1$:	STX WSYNC		;3
	LDA I,0			;2
	STA PF0			;3
	LDA AY,PF1L		;4
	STA PF1			;3
	LDA AY,PF2L		;4
	STA PF2			;3
	LDA AY,PF0R		;4
	LDA AY,PF0R		;4
	STA PF0			;3
	LDA AY,PF1R		;4
	LDA AY,PF1R		;4
	LDA AY,PF1R		;4
	STA PF1			;3
	LDA I,0			;2
	LDA I,0			;2
	STA PF2			;3
	TXA			;2
	INX			;2
	AND I,3			;2
	BNE 1$			;2/3
	INY			;2
	CPY I,5			;2
	BNE 1$			;3
	JMP TBLKLN

TPVOUT: LDX I,40.			;2
	LDA I,11			;2
	STA CTRLPF			;3
	LDY I,0				;2
	STY T10				;3
	LDA T8
	STA PF0
TP12:	STX WSYNC			;3
	LDY T10				;3
	TXA				;2
	PHA				;3
	EOR I,8				;2
	AND I,0F			;2
	LSR				;2
	BNE 1$				;2/3
	INC T10				;5
	PHA				;3
	LDA I,0				;2
	BEQ TPV1			;3
1$:	TAX				;2
	PHA				;3
	LDA AX,LYNTAB-1			;4
	CLC				;2
	ADC AY,MSG1-1			;4
	TAX				;2
	LDA AX,CHRTAB			;4
TPV1:	STA WSYNC			;3
	STA GRP0			;3
	PLA				;3
	BNE TPV3			;2/3
	LDA I,0				;2
	BEQ TPV2			;3
TPV3:	TAX				;2
	LDA AX,LYNTAB-1			;4
	ADC AY,MSG2-1			;4
	TAX				;2
	LDA AX,CHRTAB			;4
TPV2:	STA GRP1			;3
	PLA				;3
	TAX				;2
	INX				;2
	INX
	CPX I,216.			;2
	BNE TP12			;3
TBLKLN:	STA WSYNC			;3
	LDA I,0
	STA GRP0
	STA GRP1
	STA PF0
	STA PF1
	STA PF2
	STA ENAM0
	STA ENAM1
	STA ENABL
	RTS
PF1L:	.BYTE 7C,10,10,10,10		;T
PF2L:	.BYTE 9F,81,87,01,9F		;E
PF0R:	.BYTE 0F0,0,0F0,80,0F0		;S
PF1R:	.BYTE 3E,8,8,8,8		;T

;TABLES
					;#X5+4
TYMZ5:	.BYTE 4,9,0E,13,18,1D,22,27,2C,31
;BRICK RANGE TABLES
RTA:	.BYTE 0A0,0A4,0A8,0AC,0B0,0B4
RTB:	.BYTE 0A3,0A7,0AB,0AF,0B3,0B7
RTC:	.BYTE 0DF,0EF,0F7,0FB,0FD,0FE
RPNTS:  .BYTE 3,3,5,5,7,7
LPNTS:	.BYTE 7,7,5,5,3,3
LTA:	.BYTE 4A,4E,52,56,5A,5E
LTB:	.BYTE 4D,51,55,59,5D,61
	
;PLAYFIELD SPECIFICIATION TABLES
PFSTBL:	.WORD PFT1-4,PFT2-4,PFT2-4,ENDGOL,SOCRPF	;SOCCER
	.WORD PFT3-4,PFT4-4,PFT2-4,CGOAL,HCKYPF		;HOCKEY
	.WORD PFT1-4,PFT2-4,PFT0-4,SDGOAL,SOCRPF	;Q,PONG
	.WORD PFT3-4,PFT2-4,PFT2-4,HBSCOR,SOCRP1	;HANDBALL
	.WORD PFT3-4,PFT2-4,PFT5-4,VBSCOR,SOCRP1	;VOLLEYBALL
	.WORD PFT3-4,PFT6-4,PFT2-4,BASKET,BSKTPF	;BASKETBALL
	.WORD PFT3-4,PFT2-4,PFT2-4,BKSCOR,BKPF		;BREAKOUT 2
;LUM COLOR TABLE;P0,P1,PF,BK
LUMTBL:	.BYTE 12.,0,14.,6	;LGRAY,BLACK,WHITE,OFF WHITE.
;DIFFICULTY MASK TABLES
NSZTBL:	.BYTE 20,20,30,20
	.BYTE 27,25,37,25
MSKTBL:	.BYTE 30,38,30,38
	.BYTE 3C,3C,3C,3C,32,3A
	.BYTE 3C,3C,32,3A,3C,3C
;BUTTON MASK ARRAY
BUTMSK:	.BYTE 80,40,20,10
;SPEEDUP MASK TABLE: NONE, 4TH 8TH
SPDMSK:	.BYTE 0FF,3,7,15.		;16TH
;VOLLEYBALL OFFSET TABLE
POFTBL:	.BYTE 18,60,1B,65
;PADDLE SPEC TABLES
PCDTBL: .BYTE 24,01			;SOCCER
	.BYTE 20,06			;SOCCER DOUBLES I
	.BYTE 24,0B			;SOCCER DOUBLES II
	.BYTE 24,42			;FOOSBALL
	.BYTE 22,4F			;FOOSBALL DOUBLES
	.BYTE 20,11			;HOCKEY I
	.BYTE 24,15			;HOCKEY II
	.BYTE 26,16			;HOCKEY III
	.BYTE 20,6B			;HOCKEY 4-II
	.BYTE 0A5,1A			;QUADRUPONG
	.BYTE 20,9D			;HANDBALL
	.BYTE 0E5,22			;VBALL/BBALL
	.BYTE 27,25			;BREAKOUT
	.BYTE 20,29			;HOCKEY I-4

;PADDLE POSITION TABLE
POSTBL: .BYTE 9C,0C0,9D,0C1		;SOCCER
	.BYTE 95,69,40,0BC		;  "
	.BYTE 67,57,46,76		;  "
	.BYTE 87,57,46,96		;FOOSBALL
	.BYTE 54,0A8,8D,71		;HOCKEY I
	.BYTE 54,68,55,69		;HOCKEY II
	.BYTE 38,0C0,40,0BC		;QPONG
	.BYTE 0A8,0A8,90,90		;HBALL
	.BYTE 0B8,0B8,98,98		;V/BALL
	.BYTE 96,96,18,0C9		;BREAKOUT 2  ;40,40
	.BYTE 8D,71,54,0A8		;HOCKEY I-4

;GAME SPECIFICATION TABLE
GAMCON:	.BYTE 0,0		;0;0&1;SOCCER I
	.BYTE 2,40		;1;4 ONLY;SOCCER II
	.BYTE 3,0		;2;3&4;FOOZPONG
	.BYTE 5,0		;3;5&6;HOCKEY I
	.BYTE 7,0		;4;7&8;HOCKEY II
	.BYTE 9,80		;5;9 ONLY;HOCKEY III
	.BYTE 10.,0		;6;10.&11.;QUADRAPONG
	.BYTE 12.,0		;7;12.&13.;HANDBALL
	.BYTE 14.,0		;8;14.&15.;VOLLEYBALL
	.BYTE 16.,0		;9;16.&17.;BASKETBALL I
	.BYTE 18.,0		;10.;18.&19.;BASKETBALL II
	.BYTE 20.,0C0		;11.;20.&21.;BREAKOUT

GAMTBL: .BYTE 88,00			;SOCCER I
	.BYTE 80,02			;4 PLAYER SOCCER I
	.BYTE 40,01			;4 PLAYER SOCCER II
	.BYTE 48,03			;2 PLAYER FOOSBALL
	.BYTE 40,04			;4 PLAYER FOOSBALL
	.BYTE 89,05			;HOCKEY I
	.BYTE 81,0D			;4 PLAYER HOCKEY I
	.BYTE 49,06			;HOCKEY II
	.BYTE 41,08			;4 PLAYER HOCKEY II
	.BYTE 49,07			;HOCKEY III
	.BYTE 02,09			;QPONG 2-PLAYERS
	.BYTE 02,09			;QUADRUPONG 4-PLAYER
	.BYTE 8B,0A			;HANDBALL
	.BYTE 83,0A			;HANDBALL DOUBLES
	.BYTE 2C,6B			;VOLLEYBALL
	.BYTE 24,6B			;VBALL DOUBLES
	.BYTE 2D,6B,25,6B		;BASKETBALL I
	.BYTE 6D,2B,65,2B		;BASKETBALL II
	.BYTE 06,8C,06,8C		;BREAKOUT 1,2
;SIDE PLAYFIELD TABLE W/HOLE
PFT1:	.WORD 0F000,3030,3030,30
	.WORD 0,0,0,0,3000,3030,3030
	.WORD 0FF
;TOP/BOTTOM WALL
PFT2:	.WORD 0FF00,0,0,0,0,0,0,0
	.WORD 0,0,0
	.WORD 0FF
;SOLID END WALL
PFT3:	.WORD 0FF00,3030,3030
	.WORD 3030,3030,3030,3030
	.WORD 3030,3030,3030,3030
	.WORD 0FF
;"C" HOCKEY GOAL
PFT4:	.WORD 0FF00,0,0,0,4070
	.WORD 4040,4040,7040,0,0,0
	.WORD 0FF
;VOLLEYBALL NET
PFT5:	.WORD 0FF00,0,0,0,0,0
	.WORD 0,80,80,80,80
	.WORD 0FF
;BASKETBALL NET
PFT6:	.WORD 0FF00,0,0,0
	.WORD 0F0,0,0,0,0,0,0,0FF
PFT0:	.WORD 0,0,0,0,0,0,0,0,0,0,0,0
CONTBL:	.BYTE 00,88,44,0CC,22,0AA,66,0EE
WERTBL: .WORD MSD0
	.WORD MSD1
	.WORD LSD0
	.WORD LSD1
	.WORD BAL0
	.WORD BAL1
SCRTBL:					;SCORE GRAPHICS
	.BYTE 77,55,55,55,77			;0
	.BYTE 66,22,22,22,77		;11
	.BYTE 77,11,77,44,77		;22
	.BYTE 77,11,33,11,77		;33
	.BYTE 55,55,77,11,11		;44
	.BYTE 77,44,77,11,77		;55
	.BYTE 77,44,77,55,77		;66
	.BYTE 77,55,11,11,11		;77
	.BYTE 77,55,77,55,77		;88
	.BYTE 77,55,77,11,77		;99

AMSK:	.BYTE 0
BMSK:	.BYTE 0,0,2A,15,2A,15,2A,15,2A,15,2A,15,2A,15
	;BONUS SOUND TABLE
BONSND:	.BYTE 1C,0F2,1C,0C1,1C,0C1,1C,0C2,19,0F2,1C,0C2,19,0C2,16,0F8,0,0
	;GAME TIME OUT SETTINGS FOR 60/50 HZ;SHORT-60,SHORT-50,LONG-60,LONG-50
GT:	.BYTE 8C,75,0D2,0AF
	;BONUS TABLE FOR BREAKOUT
BONTBL:	.BYTE 2			;BONUS 200
	.BYTE 52		;BONUS 250
	.BYTE 3			;BONUS 300
	.BYTE 4			;BONUS 400
	.BYTE 54		;BONUS 450
	.BYTE 0FF		;BONUS OFF

	;BONUS FLAG TABLE
BONT:	.BYTE 80,40

	;TABLE OF CREDIT/PRICE VALUES FOR COIN CONVERSION TO CREDIT/S
CCTBL:	.BYTE 12,11,21,31,11,21,12,11		;LEFT MECH,FIRST COIN
	.BYTE 21,11,21,31,13,11,31,41
	.BYTE 12,11,21,31,11,21,11,21		;RIGHT MECH,FIRST COIN
	.BYTE 41,31,51,71,11,31,61,41
	.BYTE 12,11,21,31,21,31,12,11		;LEFT MECH,SECOND COIN
	.BYTE 21,21,31,41,13,11,31,41
	.BYTE 12,11,21,31,21,31,11,21		;RIGHT MECH,SECOND COIN
	.BYTE 41,41,61,81,11,31,61,41

GAMMSG:	.BYTE 10.,10.,21.,32.,32.,43.,43.,54.,54.,65.
	.BYTE 76.,76.,87.,87.,98.,98.,109.,109.,120.,120.,131.,131.

GMES:	.BYTE 0,13,0F,3,3,5,12,0,9,0,0		;SOCCER I ;10.
	.BYTE 0,13,0F,3,3,5,12,0,19,0,0		;SOCCER II;21.
	.BYTE 0,6,0F,0F,18,10,0F,0E,7,0,0	;FOOZPONG	;32.
	.BYTE 0,8,0F,3,0B,5,17,0,9,0,0		;HOCKEY I	;43.
	.BYTE 0,8,0F,3,0B,5,17,0,19,0,0		;HOCKEY II	;54.
	.BYTE 0,8,0F,3,0B,5,17,0,1A,0,0		;HOCKEY III	;65.
	.BYTE 11,15,1,4,12,1,10,0F,0E,7,0	;QUADRAPONG	;76.
	.BYTE 0,8,1,0E,4,2,1,0C,0C,0,0		;HANDBALL	;87.
	.BYTE 16,0F,0C,0C,5,17,2,1,0C,0C,0	;VOLLEYBALL	;98.
	.BYTE 2,1,13,0B,5,14,2,1,0C,0C,9	;BASKETBALL I	;109.
	.BYTE 2,1,13,0B,5,14,2,1,0C,0C,19	;BASKETBALL II	;120.
	.BYTE 0,2,12,5,1,0B,0F,15,14,0,0	;BREAKOUT	;131.
STATMS:	.BYTE 0,7,1,0D,5,0,0F,16,5,12,0  	;GAME OVER	;10.
	.BYTE 0,0,0,3,12,5,4,9,14,13,0		;X CREDITS	;21.
	.BYTE 6,9,0E,0,10,1,12,14,9,5,0		;FRENCH; FIN PARTIE	;32.
	.BYTE 0,0,0,3,12,5,4,9,14,13,0		;X CREDITS	;43.
	.BYTE 0,13,10,9,5,0C,5,0E,4,5,0		;GERMAN;SPIELENDE	;54.
	.BYTE 0,0,0,0B,12,5,4,9,14,5,0		;X-KREDITE	;65.
	.BYTE 6,9,0E,0,10,1,12,14,9,4,1		;SPANISH;FIN PARTIDA	;76.
	.BYTE 0,0,0,3,12,5,4,9,14,0F,13		;X-CREDITOS	;87.
STATTB:	.BYTE 10.,21.			;ENGLISH
	.BYTE 32.,43.			;FRENCH
	.BYTE 54.,65.			;GERMAN
	.BYTE 76.,87.		;SPANISH
LYNTAB:	.BYTE 0,36.,72.,108.,144.,180.,216.
	.=1EE6
;COMPUTE HORIZONTAL RESET ROUTINE
CHRST:	SEC			;ADD OFFSET
	SBC I,47.
	LDY I,2			;INITIALIZE LOOP COUNT
CHR1:	INY			;DIVIDE BY 15 LOOP
	SBC I,15.
	BCS CHR1		;BRANCH IF + REMAINDER
	EOR I,0FF		;COMPLEMENT REMAINDER
	SBC I,6			;-7 (CY=0)
	BRK			;SHIFT UP 4
	NOP
;ACTUAL HORIZONTAL RESET LOOP
HRST:	STY WSYNC		;START LINE
HRST1:	DEY			;COUNT TIME 15X280NS
	BPL HRST1		;(15 3.58MHZ CYCLES)
	STA ZX,RESP0		;OUTPUT RESET
	STA ZX,HMP0		;OUTPUT HM OFFSET
	RTS

	.=1F00
;SPACE,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,Y,Z,II,III,1,2,3,4,5,6,7,8,9
CHRTAB:	.BYTE 0,1C,7E,3E,7E,7F,7F,3E,63,18,3,63,60,63,63,3E,7E,3E	;LINE 1;A-Q
	.BYTE 7E,3E,7E,63,63,66,7F,36,0DB,78,3E,3E,6,7E,3E,7F,3E,3E	;R-9
LINE2:	.BYTE 0,36,63,63,63,60,60,63,63,18,3,66,60,77,73,63,63,63	;A-Q
	.BYTE 63,63,18,63,63,66,7,36,0DB,18,63,63,0E,60,60,63,63,63	;R-9
LINE3:	.BYTE 0,63,63,60,63,60,60,60,63,18,3,6C,60,7F,7B,63,63,63	;A-Q
	.BYTE 63,78,18,63,77,66,0E,36,0DB,18,7,3,1E,60,60,6,63,63	;R-9
LINE4:	.BYTE 0,63,7E,60,63,7C,7E,67,7F,18,3,78,60,7F,7F,63,63,63	;A-Q
	.BYTE 66,3E,18,63,36,3C,1C,36,0DB,18,0E,0E,36,7E,7E,0C,3E,3F	;R-9
LINE5:	.BYTE 0,7F,63,60,63,60,60,63,63,18,63,7C,60,6B,6F,63,7E,7B	;A-Q
	.BYTE 7C,0F,18,63,36,18,38,36,0DB,18,38,3,66,03,63,18,63,3	;R-9
LINE6:	.BYTE 0,63,63,63,63,60,60,63,63,18,63,6E,60,63,67,63,60,6F	;A-Q
	.BYTE 6E,63,18,63,1C,18,70,36,0DB,18,70,63,7F,63,63,18,63,3	;R-9
LINE7:	.BYTE 0,63,7E,3E,7E,7F,60,3F,63,18,3E,67,7F,63,63,3E,60,3E	;A-Q
	.BYTE 67,3E,18,3E,1C,18,7F,36,0DB,7E,7F,3E,6,3E,3E,18,3E,3E	;R-9
	.=1FFC
	.WORD TEST,ROTUL
	.END
              